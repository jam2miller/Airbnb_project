{
 "cells": [
  {
   "cell_type": "raw",
   "id": "b1c13c80",
   "metadata": {},
   "source": [
    "---\n",
    "title: \"Prediction Problem Report (Name of model (KNN / RF / Boosting / Ensemble); Regression / Classification)\"\n",
    "format: \n",
    "  html:\n",
    "    toc: true\n",
    "    toc-title: Contents\n",
    "    toc-depth: 4\n",
    "    code-fold: show\n",
    "    self-contained: true\n",
    "    html-math-method: mathml \n",
    "jupyter: python3\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d4b9670",
   "metadata": {},
   "source": [
    "## Instructions {-}\n",
    "\n",
    "- This is the template for the code and report on the Prediction Problem assignments.\n",
    "\n",
    "- Your code in steps 1, 3, 4, and 5 will be executed sequentially, and must produce the RMSE / accuracy claimed on Kaggle.\n",
    "\n",
    "- Your code in step 2 will also be executed, and must produce the optimal hyperparameter values used to train the model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95e86f05",
   "metadata": {},
   "source": [
    "## Read data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f18a8872",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.patches import Patch\n",
    "from matplotlib.lines import Line2D\n",
    "\n",
    "from sklearn.metrics import mean_squared_error, root_mean_squared_error\n",
    "from sklearn.model_selection import cross_val_score,train_test_split\n",
    "from sklearn.metrics import mean_squared_error,r2_score\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.model_selection import GridSearchCV, ParameterGrid\n",
    "from sklearn.linear_model import LassoCV, Lasso, LinearRegression\n",
    "from sklearn.ensemble import BaggingRegressor, RandomForestRegressor, StackingRegressor\n",
    "import statsmodels.formula.api as smf\n",
    "    \n",
    "#Libraries for visualizing trees\n",
    "from sklearn.tree import export_graphviz \n",
    "from six import StringIO\n",
    "from IPython.display import Image  \n",
    "import pydotplus\n",
    "import time as tm\n",
    "\n",
    "from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict, \\\n",
    "cross_validate, GridSearchCV, RandomizedSearchCV, KFold, StratifiedKFold, RepeatedKFold, RepeatedStratifiedKFold\n",
    "from sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor\n",
    "from sklearn.preprocessing import StandardScaler, PolynomialFeatures\n",
    "from sklearn.metrics import accuracy_score, recall_score, mean_squared_error\n",
    "from scipy.stats import uniform\n",
    "from skopt import BayesSearchCV\n",
    "from skopt.space import Real, Categorical, Integer\n",
    "import seaborn as sns\n",
    "from skopt.plots import plot_objective, plot_histogram, plot_convergence\n",
    "import matplotlib.pyplot as plt\n",
    "import warnings\n",
    "from IPython import display\n",
    "import itertools as it\n",
    "import xgboost as xgb\n",
    "from catboost import CatBoostRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bab817ea",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>host_id</th>\n",
       "      <th>host_since</th>\n",
       "      <th>host_location</th>\n",
       "      <th>host_response_time</th>\n",
       "      <th>host_response_rate</th>\n",
       "      <th>host_acceptance_rate</th>\n",
       "      <th>host_is_superhost</th>\n",
       "      <th>host_neighbourhood</th>\n",
       "      <th>host_listings_count</th>\n",
       "      <th>...</th>\n",
       "      <th>review_scores_checkin</th>\n",
       "      <th>review_scores_communication</th>\n",
       "      <th>review_scores_location</th>\n",
       "      <th>review_scores_value</th>\n",
       "      <th>instant_bookable</th>\n",
       "      <th>calculated_host_listings_count</th>\n",
       "      <th>calculated_host_listings_count_entire_homes</th>\n",
       "      <th>calculated_host_listings_count_private_rooms</th>\n",
       "      <th>calculated_host_listings_count_shared_rooms</th>\n",
       "      <th>reviews_per_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>53872917</td>\n",
       "      <td>366516391</td>\n",
       "      <td>2018-04-09</td>\n",
       "      <td>Chicago, IL</td>\n",
       "      <td>within an hour</td>\n",
       "      <td>96%</td>\n",
       "      <td>95%</td>\n",
       "      <td>f</td>\n",
       "      <td>Back of the Yards</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>5.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>4.28</td>\n",
       "      <td>4.83</td>\n",
       "      <td>f</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>39269663</td>\n",
       "      <td>50276775</td>\n",
       "      <td>2014-12-23</td>\n",
       "      <td>NaN</td>\n",
       "      <td>within an hour</td>\n",
       "      <td>100%</td>\n",
       "      <td>97%</td>\n",
       "      <td>f</td>\n",
       "      <td>Clearwater Beach</td>\n",
       "      <td>1141</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>t</td>\n",
       "      <td>58</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>556480733030442463</td>\n",
       "      <td>681680651</td>\n",
       "      <td>2020-03-08</td>\n",
       "      <td>NaN</td>\n",
       "      <td>within an hour</td>\n",
       "      <td>100%</td>\n",
       "      <td>100%</td>\n",
       "      <td>f</td>\n",
       "      <td>Lake View East</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>5.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>4.93</td>\n",
       "      <td>4.80</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>52397280</td>\n",
       "      <td>94345291</td>\n",
       "      <td>2015-10-22</td>\n",
       "      <td>Chicago, IL</td>\n",
       "      <td>within an hour</td>\n",
       "      <td>100%</td>\n",
       "      <td>98%</td>\n",
       "      <td>f</td>\n",
       "      <td>Bucktown</td>\n",
       "      <td>55</td>\n",
       "      <td>...</td>\n",
       "      <td>4.38</td>\n",
       "      <td>4.23</td>\n",
       "      <td>4.54</td>\n",
       "      <td>3.85</td>\n",
       "      <td>t</td>\n",
       "      <td>55</td>\n",
       "      <td>55</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>745949202271858960</td>\n",
       "      <td>790998106</td>\n",
       "      <td>2021-04-04</td>\n",
       "      <td>Chicago, IL</td>\n",
       "      <td>within an hour</td>\n",
       "      <td>100%</td>\n",
       "      <td>100%</td>\n",
       "      <td>t</td>\n",
       "      <td>Near South Side</td>\n",
       "      <td>74</td>\n",
       "      <td>...</td>\n",
       "      <td>4.83</td>\n",
       "      <td>4.85</td>\n",
       "      <td>4.74</td>\n",
       "      <td>4.72</td>\n",
       "      <td>t</td>\n",
       "      <td>74</td>\n",
       "      <td>74</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.24</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 54 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   id    host_id  host_since host_location host_response_time  \\\n",
       "0            53872917  366516391  2018-04-09   Chicago, IL     within an hour   \n",
       "1            39269663   50276775  2014-12-23           NaN     within an hour   \n",
       "2  556480733030442463  681680651  2020-03-08           NaN     within an hour   \n",
       "3            52397280   94345291  2015-10-22   Chicago, IL     within an hour   \n",
       "4  745949202271858960  790998106  2021-04-04   Chicago, IL     within an hour   \n",
       "\n",
       "  host_response_rate host_acceptance_rate host_is_superhost  \\\n",
       "0                96%                  95%                 f   \n",
       "1               100%                  97%                 f   \n",
       "2               100%                 100%                 f   \n",
       "3               100%                  98%                 f   \n",
       "4               100%                 100%                 t   \n",
       "\n",
       "  host_neighbourhood  host_listings_count  ...  review_scores_checkin  \\\n",
       "0  Back of the Yards                   11  ...                   5.00   \n",
       "1   Clearwater Beach                 1141  ...                    NaN   \n",
       "2     Lake View East                    1  ...                   5.00   \n",
       "3           Bucktown                   55  ...                   4.38   \n",
       "4    Near South Side                   74  ...                   4.83   \n",
       "\n",
       "  review_scores_communication review_scores_location review_scores_value  \\\n",
       "0                        5.00                   4.28                4.83   \n",
       "1                         NaN                    NaN                 NaN   \n",
       "2                        5.00                   4.93                4.80   \n",
       "3                        4.23                   4.54                3.85   \n",
       "4                        4.85                   4.74                4.72   \n",
       "\n",
       "  instant_bookable  calculated_host_listings_count  \\\n",
       "0                f                               9   \n",
       "1                t                              58   \n",
       "2                f                               1   \n",
       "3                t                              55   \n",
       "4                t                              74   \n",
       "\n",
       "   calculated_host_listings_count_entire_homes  \\\n",
       "0                                            1   \n",
       "1                                            0   \n",
       "2                                            1   \n",
       "3                                           55   \n",
       "4                                           74   \n",
       "\n",
       "  calculated_host_listings_count_private_rooms  \\\n",
       "0                                            8   \n",
       "1                                           58   \n",
       "2                                            0   \n",
       "3                                            0   \n",
       "4                                            0   \n",
       "\n",
       "  calculated_host_listings_count_shared_rooms  reviews_per_month  \n",
       "0                                           0               0.33  \n",
       "1                                           0                NaN  \n",
       "2                                           0               2.78  \n",
       "3                                           0               3.61  \n",
       "4                                           0               3.24  \n",
       "\n",
       "[5 rows x 54 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train = pd.read_csv('C:/Users/jam2m/Data_Science/Datasets/train_regression.csv')\n",
    "test = pd.read_csv('C:/Users/jam2m/Data_Science/Datasets/test_regression.csv')\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b5d4b16",
   "metadata": {},
   "source": [
    "## 1) Data pre-processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "948df4d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('float64')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# making price numeric\n",
    "train['price'] = train['price'].apply(lambda x: x.replace('$', '') and x.replace(',', ''))\n",
    "train['price'] = pd.to_numeric(train['price'].apply(lambda x: x.replace('$', '')))\n",
    "train['price'].dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b08b433b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# creating a log_price column in test as well as a price column\n",
    "test['price'] = np.nan\n",
    "test['log_price'] = np.nan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b8d0e9aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# off the bat getting rid of an absurdly high price \n",
    "train1 = train.loc[train['price'] <=5000, :].copy()\n",
    "train1.shape\n",
    "\n",
    "# creating log_price column\n",
    "train1['log_price'] = np.log(train1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "83d54b55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['id', 'host_id', 'host_since', 'host_location', 'host_response_time',\n",
       "       'host_response_rate', 'host_acceptance_rate', 'host_is_superhost',\n",
       "       'host_neighbourhood', 'host_listings_count',\n",
       "       'host_total_listings_count', 'host_verifications',\n",
       "       'host_has_profile_pic', 'host_identity_verified',\n",
       "       'neighbourhood_cleansed', 'latitude', 'longitude', 'property_type',\n",
       "       'room_type', 'accommodates', 'bathrooms_text', 'beds', 'price',\n",
       "       'minimum_nights', 'maximum_nights', 'minimum_minimum_nights',\n",
       "       'maximum_minimum_nights', 'minimum_maximum_nights',\n",
       "       'maximum_maximum_nights', 'minimum_nights_avg_ntm',\n",
       "       'maximum_nights_avg_ntm', 'has_availability', 'availability_30',\n",
       "       'availability_60', 'availability_90', 'availability_365',\n",
       "       'number_of_reviews', 'number_of_reviews_ltm', 'number_of_reviews_l30d',\n",
       "       'first_review', 'last_review', 'review_scores_rating',\n",
       "       'review_scores_accuracy', 'review_scores_cleanliness',\n",
       "       'review_scores_checkin', 'review_scores_communication',\n",
       "       'review_scores_location', 'review_scores_value', 'instant_bookable',\n",
       "       'calculated_host_listings_count',\n",
       "       'calculated_host_listings_count_entire_homes',\n",
       "       'calculated_host_listings_count_private_rooms',\n",
       "       'calculated_host_listings_count_shared_rooms', 'reviews_per_month',\n",
       "       'log_price', 'baths', 'host_days_since', 'days_since_first',\n",
       "       'days_since_last', 'neighborhood_price_bins', 'low_price_hood',\n",
       "       'below_average_price_hood', 'average_price_hood',\n",
       "       'above_average_price_hood', 'high_price_hood', 'superhost_f',\n",
       "       'superhost_t', 'profile_f', 'profile_t',\n",
       "       'verifications_['email', 'phone', 'work_email']',\n",
       "       'verifications_['email', 'phone']', 'verifications_['email']',\n",
       "       'verifications_['phone', 'work_email']', 'verifications_['phone']',\n",
       "       'identity_f', 'identity_t', 'property_room', 'room_room', 'bookable_f',\n",
       "       'bookable_t', 'log_reviews', 'log_reviews_l30d', 'log_reviews_ltm',\n",
       "       'host_total_listings_over_2000', 'listings_over 2000',\n",
       "       'listings_under 2000', 'reviews_per_month_log',\n",
       "       'property_room_cleansed', 'Entire guest suite', 'Entire home',\n",
       "       'Entire rental unit', 'Entire serviced apartment', 'Entire townhouse',\n",
       "       'Private room in condo', 'Private room in home',\n",
       "       'Private room in rental unit', 'Room in hotel', 'room', 'room_other',\n",
       "       'neighbourhoods'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# making host_response_rate numeric\n",
    "train1['host_response_rate'] = pd.to_numeric(train1['host_response_rate'].apply(lambda x: x.replace('%', '') if type(x) == str else x))\n",
    "test['host_response_rate'] = pd.to_numeric(test['host_response_rate'].apply(lambda x: x.replace('%', '') if type(x) == str else x))\n",
    "\n",
    "#making host_acceptance_rate numeric\n",
    "train1['host_acceptance_rate'] = pd.to_numeric(train1['host_acceptance_rate'].apply(lambda x: x.replace('%', '') if type(x) == str else x))\n",
    "test['host_acceptance_rate'] = pd.to_numeric(test['host_acceptance_rate'].apply(lambda x: x.replace('%', '') if type(x) == str else x))\n",
    "\n",
    "\n",
    "# imputing all missing values\n",
    "train_imputed = train1.apply(lambda x: x.fillna(x.mean()) if x.dtype == 'int64' or x.dtype == 'float64'\\\n",
    "                             else x.fillna(x.mode()[0]))\n",
    "test_imputed = test.apply(lambda x: x.fillna(x.mean()) if x.dtype == 'int64' or x.dtype == 'float64'\\\n",
    "                             else x.fillna(x.mode()[0]))\n",
    "\n",
    "# making baths numeric\n",
    "# this definitely was one of the first things to really help me out\n",
    "# Define a mapping of bathroom descriptions to their respective numeric values\n",
    "bathroom_mapping = {\n",
    "    '1 bath': 1,\n",
    "    '2 baths': 2,\n",
    "    '1 shared bath': 1,\n",
    "    '1 private bath': 1,\n",
    "    '1.5 baths': 1.5,\n",
    "    '3 baths': 3,\n",
    "    '2.5 baths': 2.5,\n",
    "    '2 shared baths': 2,\n",
    "    '3.5 baths': 3.5,\n",
    "    '1.5 shared baths': 1.5,\n",
    "    '4 baths': 4,\n",
    "    '0 baths': 0,\n",
    "    '3 shared baths': 3,\n",
    "    '2.5 shared baths': 2.5,\n",
    "    '4.5 baths': 4.5,\n",
    "    '6 baths': 6,\n",
    "    '5.5 baths': 5.5,\n",
    "    '5 baths': 5,\n",
    "    '11 shared baths': 11,\n",
    "    'Half-bath': 0.5,\n",
    "    '7 baths': 7,\n",
    "    'Shared half-bath': 0.5,\n",
    "    'Private half-bath': 0.5,\n",
    "    '11.5 shared baths': 11.5,\n",
    "    '10 baths': 10,\n",
    "    '6.5 baths': 6.5,\n",
    "    '8 baths': 8,\n",
    "    '9.5 baths': 9.5\n",
    "}\n",
    "\n",
    "# Map the column using the defined mapping\n",
    "train_imputed['baths'] = train_imputed['bathrooms_text'].map(bathroom_mapping)\n",
    "\n",
    "# Define a mapping of bathroom descriptions to their respective numeric values\n",
    "bathroom_mapping = {\n",
    "    '0 baths': 0,\n",
    "    '0 shared baths': 0,\n",
    "    'Half-bath': 0.5,\n",
    "    'Shared half-bath': 0.5,\n",
    "    '1 bath': 1,\n",
    "    '1 shared bath': 1,\n",
    "    '1 private bath': 1,\n",
    "    '1.5 baths': 1.5,\n",
    "    '1.5 shared baths': 1.5,\n",
    "    '2 baths': 2,\n",
    "    '2 shared baths': 2,\n",
    "    '2.5 baths': 2.5,\n",
    "    '2.5 shared baths': 2.5,\n",
    "    '3 baths': 3,\n",
    "    '3 shared baths': 3,\n",
    "    '3.5 baths': 3.5,\n",
    "    '4 baths': 4,\n",
    "    '4.5 baths': 4.5,\n",
    "    '5 baths': 5,\n",
    "    '5.5 baths': 5.5,\n",
    "    '6 baths': 6,\n",
    "    '6.5 baths': 6.5,\n",
    "    '7 baths': 7,\n",
    "    '7.5 baths': 7.5,\n",
    "    '8 baths': 8,\n",
    "    '8.5 baths': 8.5,\n",
    "    '9 baths': 9,\n",
    "    '10 baths': 10,\n",
    "    '11 baths': 11,\n",
    "    '11 shared baths': 11\n",
    "    # Add more mappings as needed\n",
    "}\n",
    "\n",
    "# Map the column using the defined mapping\n",
    "test_imputed['baths'] = test_imputed['bathrooms_text'].map(bathroom_mapping)\n",
    "\n",
    "\n",
    "# converting host_since and first_review and last_review ot numeric\n",
    "train_imputed['host_since'] = pd.to_datetime(train_imputed['host_since'])\n",
    "train_imputed['host_days_since'] = (pd.to_datetime('today') - train_imputed['host_since']).dt.days\n",
    "\n",
    "test_imputed['host_since'] = pd.to_datetime(test_imputed['host_since'])\n",
    "test_imputed['host_days_since'] = (pd.to_datetime('today') - test_imputed['host_since']).dt.days\n",
    "\n",
    "#first review\n",
    "train_imputed['first_review'] = pd.to_datetime(train_imputed['first_review'])\n",
    "train_imputed['days_since_first'] = (pd.to_datetime('today') - train_imputed['first_review']).dt.days\n",
    "\n",
    "test_imputed['first_review'] = pd.to_datetime(test_imputed['first_review'])\n",
    "test_imputed['days_since_first'] = (pd.to_datetime('today') - test_imputed['first_review']).dt.days\n",
    "\n",
    "# last review\n",
    "train_imputed['last_review'] = pd.to_datetime(train_imputed['last_review'])\n",
    "train_imputed['days_since_last'] = (pd.to_datetime('today') - train_imputed['last_review']).dt.days\n",
    "\n",
    "test_imputed['last_review'] = pd.to_datetime(test_imputed['last_review'])\n",
    "test_imputed['days_since_last'] = (pd.to_datetime('today') - test_imputed['last_review']).dt.days\n",
    "\n",
    "#### Dummies for neighbourhood by price\n",
    "\n",
    "# dummies by price for neighbourhoods(potentially will come back to make more or less bins but this feels good for now)\n",
    "bins = pd.qcut(train_imputed.groupby('neighbourhood_cleansed')['price'].mean(), q=5, \\\n",
    "        labels = ['low_price_hood', 'below_average_price_hood', 'average_price_hood', 'above_average_price_hood', 'high_price_hood'])\n",
    "train_imputed['neighborhood_price_bins'] = train_imputed['neighbourhood_cleansed'].map(bins)\n",
    "neighbourhood_price_dummies = pd.get_dummies(train_imputed['neighborhood_price_bins'])\n",
    "train_imputed = pd.concat([train_imputed, neighbourhood_price_dummies], axis = 1)\n",
    "\n",
    "test_neighborhoods = test_imputed['neighbourhood_cleansed']\n",
    "test_imputed['neighborhood_price_bins'] = test_neighborhoods.map(lambda x: bins[x] if x in bins else 'average_price_hood')\n",
    "neighbourhood_price_dummies = pd.get_dummies(test_imputed['neighborhood_price_bins'])\n",
    "test_imputed = pd.concat([test_imputed, neighbourhood_price_dummies], axis = 1)\n",
    "\n",
    "### Making Dummies for rest of variables\n",
    "\n",
    "# host_is_superhost\n",
    "superhost_dummies = pd.get_dummies(train_imputed['host_is_superhost'], prefix = 'superhost')\n",
    "train_imputed = pd.concat([train_imputed, superhost_dummies], axis = 1)\n",
    "\n",
    "# for test\n",
    "superhost_dummies = pd.get_dummies(test_imputed['host_is_superhost'], prefix = 'superhost')\n",
    "test_imputed = pd.concat([test_imputed, superhost_dummies], axis = 1)\n",
    "\n",
    "# profile picture\n",
    "profile_pic_dummies = pd.get_dummies(train_imputed['host_has_profile_pic'], prefix = 'profile')\n",
    "train_imputed = pd.concat([train_imputed, profile_pic_dummies], axis = 1)\n",
    "\n",
    "# for test\n",
    "profile_pic_dummies = pd.get_dummies(test_imputed['host_has_profile_pic'], prefix = 'profile')\n",
    "test_imputed = pd.concat([test_imputed, profile_pic_dummies], axis = 1)\n",
    "\n",
    "# host verifications\n",
    "verifications_dummies = pd.get_dummies(train_imputed['host_verifications'], prefix = 'verifications')\n",
    "train_imputed = pd.concat([train_imputed, verifications_dummies], axis = 1)\n",
    "\n",
    "# for test\n",
    "verifications_dummies = pd.get_dummies(test_imputed['host_verifications'], prefix = 'verifications')\n",
    "test_imputed = pd.concat([test_imputed, verifications_dummies], axis = 1)\n",
    "\n",
    "# host identity\n",
    "identity_dummies = pd.get_dummies(train_imputed['host_identity_verified'], prefix = 'identity')\n",
    "train_imputed = pd.concat([train_imputed, identity_dummies], axis = 1)\n",
    "\n",
    "# for test\n",
    "identity_dummies = pd.get_dummies(test_imputed['host_identity_verified'], prefix = 'identity')\n",
    "test_imputed = pd.concat([test_imputed, identity_dummies], axis = 1)\n",
    "\n",
    "# making a \"dummy\" variable for property type, room vs not room\n",
    "train_imputed['property_room'] = train_imputed['property_type'].apply(lambda x: True if 'room' in x else False)\n",
    "\n",
    "# you got it, for test\n",
    "test_imputed['property_room'] = test_imputed['property_type'].apply(lambda x: True if 'room' in x else False)\n",
    "# did not end up using this column because of a predictor created later\n",
    "\n",
    "# do same as above but for the room type variable\n",
    "train_imputed['room_room'] = train_imputed['room_type'].apply(lambda x: True if 'room' in x else False)\n",
    "\n",
    "# anddddd, for test\n",
    "test_imputed['room_room'] = test_imputed['room_type'].apply(lambda x: True if 'room' in x else False)\n",
    "\n",
    "# Lets do ONE more for instant_bookable, for now\n",
    "bookable_dummies = pd.get_dummies(train_imputed['instant_bookable'], prefix = 'bookable')\n",
    "train_imputed = pd.concat([train_imputed, bookable_dummies], axis = 1)\n",
    "\n",
    "# for test\n",
    "bookable_dummies = pd.get_dummies(test_imputed['instant_bookable'], prefix = 'bookable')\n",
    "test_imputed = pd.concat([test_imputed, bookable_dummies], axis = 1)\n",
    "\n",
    "#### Editing Variables Now due to extreme values\n",
    "\n",
    "# capping number_of_reviews at 2000, this may be a little dumb as I used log later but my model is still good\n",
    "training = train_imputed.loc[train_imputed['number_of_reviews']<2000, :].copy()\n",
    "training.shape\n",
    "\n",
    "# we assign the values that were 0 negative one because these would be -infinity, but we don't want to make them 0 like the values of 1 are \n",
    "# making some new variables\n",
    "training['log_reviews'] = training['number_of_reviews'].apply(lambda x: np.log(x) if x != 0 else -1)\n",
    "training['log_reviews_l30d'] = training['number_of_reviews_l30d'].apply(lambda x: np.log(x) if x != 0 else -1)\n",
    "training['log_reviews_ltm'] = training['number_of_reviews_ltm'].apply(lambda x: np.log(x) if x != 0 else -1)\n",
    "\n",
    "# for test\n",
    "test_imputed['log_reviews'] = test_imputed['number_of_reviews'].apply(lambda x: np.log(x) if x != 0 else -1)\n",
    "test_imputed['log_reviews_l30d'] = test_imputed['number_of_reviews_l30d'].apply(lambda x: np.log(x) if x != 0 else -1)\n",
    "test_imputed['log_reviews_ltm'] = test_imputed['number_of_reviews_ltm'].apply(lambda x: np.log(x) if x != 0 else -1)\n",
    "\n",
    "# New column for host listings being over or under 2000, and making sure value_counts have enough for both values\n",
    "training['host_total_listings_over_2000'] = training['host_total_listings_count'].apply(lambda x: 'over 2000' if x > 2000 else 'under 2000')\n",
    "test_imputed['host_total_listings_over_2000'] = test_imputed['host_total_listings_count'].apply(lambda x: 'over 2000' if x > 2000 else 'under 2000')\n",
    "training['host_total_listings_over_2000'].value_counts()\n",
    "\n",
    "# Well have to make some dummies for that previous added column, so we back!\n",
    "# dummy variable for host_total over 2000\n",
    "listings_dummy = pd.get_dummies(training['host_total_listings_over_2000'], prefix = 'listings')\n",
    "training = pd.concat([training, listings_dummy], axis = 1)\n",
    "\n",
    "# AND FOR TEST\n",
    "listings_dummy = pd.get_dummies(test_imputed['host_total_listings_over_2000'], prefix = 'listings')\n",
    "test_imputed = pd.concat([test_imputed, listings_dummy], axis = 1)\n",
    "\n",
    "# Here we cap the maximum_nights_avg_ntm at 1125, which is the normal max and check that it worked\n",
    "test_imputed.loc[test_imputed['maximum_nights_avg_ntm']>1125, 'maximum_nights_avg_ntm'] = 1125\n",
    "test_imputed.loc[test_imputed['maximum_nights_avg_ntm']>1125]\n",
    "\n",
    "training = training.loc[training['maximum_nights_avg_ntm'] < 1126, :].copy()\n",
    "\n",
    "# removing points with a minimum nights under 600, felt like too much and there wasnt a great point to cap them at\n",
    "training = training.loc[training['minimum_minimum_nights'] < 600, :].copy()\n",
    "training.shape\n",
    "\n",
    "# capping at above 400 as thats more than a year\n",
    "training = training.loc[training['minimum_nights_avg_ntm'] < 400, :]\n",
    "training.shape\n",
    "\n",
    "# adding a log for reviews_per_month\n",
    "training['reviews_per_month_log'] = np.log(training['reviews_per_month'])\n",
    "test_imputed['reviews_per_month_log'] = np.log(test_imputed['reviews_per_month'])\n",
    "\n",
    "#### Making Property Type better dummies\n",
    "\n",
    "test_imputed.shape\n",
    "\n",
    "value_counts = training['property_type'].value_counts()\n",
    "\n",
    "property_50 = value_counts[value_counts > 50].index\n",
    "\n",
    "training['property_room_cleansed'] = training['property_type'].apply(lambda x: x if x in property_50 else \\\n",
    "                                                                   'room' if 'room' in x else 'room_other' )\n",
    "\n",
    "test_imputed['property_room_cleansed'] = test_imputed['property_type'].apply(lambda x: x if x in property_50 else \\\n",
    "                                                                   'room' if 'room' in x else 'room_other')\n",
    "\n",
    "# making dummies for these\n",
    "propertys = pd.get_dummies(training['property_room_cleansed'], drop_first=True)\n",
    "training = pd.concat([training, propertys], axis = 1)\n",
    "\n",
    "propertys = pd.get_dummies(test_imputed['property_room_cleansed'], drop_first=True)\n",
    "test_imputed = pd.concat([test_imputed, propertys], axis = 1)\n",
    "\n",
    "\n",
    "#### Making neighbourhood bins as well\n",
    "\n",
    "# We also did based on large neighbourhoods here\n",
    "value_counts = training['neighbourhood_cleansed'].value_counts()\n",
    "\n",
    "neighbourhoods = value_counts[value_counts > 40].index\n",
    "\n",
    "training['neighbourhoods'] = training['neighbourhood_cleansed'].apply(lambda x: x if x in neighbourhoods else 'neighborhood_other')\n",
    "test_imputed['neighbourhoods'] = test_imputed['neighbourhood_cleansed'].apply(lambda x: x if x in neighbourhoods else 'neighborhood_other')\n",
    "\n",
    "# making neighbourhood dummies based on this\n",
    "neighbourhood = pd.get_dummies(training['neighbourhoods'])\n",
    "training = pd.concat([training, neighbourhood], axis = 1)\n",
    "\n",
    "# for test\n",
    "neighbourhood = pd.get_dummies(test_imputed['neighbourhoods'])\n",
    "test_imputed = pd.concat([test_imputed, neighbourhood], axis = 1)\n",
    "\n",
    "# Forgot to make dummies for these\n",
    "# never made a dummy for host_response_time so doing that now\n",
    "response_time_dummies = pd.get_dummies(training['host_response_time'])\n",
    "training = pd.concat([training, response_time_dummies], axis = 1)\n",
    "\n",
    "# and for test\n",
    "response_time_dummies = pd.get_dummies(test_imputed['host_response_time'])\n",
    "test_imputed = pd.concat([test_imputed, response_time_dummies], axis = 1)\n",
    "\n",
    "test_imputed.loc[test_imputed['minimum_nights'] == 1125, 'minimum_nights'] = 100\n",
    "test_imputed.loc[test_imputed['minimum_nights'] == 100, 'minimum_nights'] = 365\n",
    "\n",
    "test_imputed.loc[test_imputed['minimum_nights_avg_ntm'] == 1125, 'minimum_nights_avg_ntm'] = 365\n",
    "\n",
    "training.shape\n",
    "\n",
    "test_imputed.shape\n",
    "\n",
    "#### We should be ready to make the model now which I will also do here and comment out\n",
    "\n",
    "training = training.reset_index().drop(columns = ['index'])\n",
    "training.columns[:100]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0c384c2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_adjusted_averages(df, group_col, price_col):\n",
    "    group_avg = df.groupby(group_col)[price_col].mean()\n",
    "    overall_mean = group_avg.mean()\n",
    "    adjusted_avg = {}\n",
    "\n",
    "    for group in group_avg.index:\n",
    "        count = np.sum(df[group_col] == group)\n",
    "        adjusted_value = ((count * group_avg[group]) + overall_mean) / (count + 1)\n",
    "        adjusted_avg[group] = adjusted_value\n",
    "\n",
    "    return pd.Series(adjusted_avg)\n",
    "\n",
    "# Calculate adjusted averages for property_room_cleansed\n",
    "property_avg_adjusted = calculate_adjusted_averages(training, 'property_room_cleansed', 'price')\n",
    "\n",
    "# Map these adjusted averages back to the DataFrames\n",
    "training['property_averages'] = training['property_room_cleansed'].map(property_avg_adjusted)\n",
    "test_imputed['property_averages'] = test_imputed['property_room_cleansed'].map(property_avg_adjusted)\n",
    "test_imputed['property_averages'] = test_imputed['property_averages'].fillna(property_avg_adjusted.mean())\n",
    "\n",
    "# Calculate adjusted averages for room_type\n",
    "rooms_avg_adjusted = calculate_adjusted_averages(training, 'room_type', 'price')\n",
    "\n",
    "# Map these adjusted averages back to the DataFrames\n",
    "training['room_averages'] = training['room_type'].map(rooms_avg_adjusted)\n",
    "test_imputed['room_averages'] = test_imputed['room_type'].map(rooms_avg_adjusted)\n",
    "test_imputed['room_averages'] = test_imputed['room_averages'].fillna(rooms_avg_adjusted.mean())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f6a593c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_tested = training.copy()\n",
    "test_tested = test_imputed.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "87b3093b",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='days_since_first', ylabel='log_price'>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.regplot(x = np.log(training['days_since_first']), y = training['log_price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "99e66cf2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# exponentiate columns with small values, log columns with bag values\n",
    "# Keep all for lasso model, keep just regular for \n",
    "#review scores\n",
    "training['review_scores_accuracy_exp'] = np.exp(training['review_scores_accuracy'])\n",
    "training['review_scores_checkin_exp'] = np.exp(training['review_scores_checkin'])\n",
    "training['review_scores_cleanliness_exp'] = np.exp(training['review_scores_cleanliness'])\n",
    "training['review_scores_communication_exp'] = np.exp(training['review_scores_communication'])\n",
    "training['review_scores_location_exp'] = np.exp(training['review_scores_location'])\n",
    "training['review_scores_rating_exp'] = np.exp(training['review_scores_rating'])\n",
    "training['review_scores_value_exp'] = np.exp(training['review_scores_value'])\n",
    "\n",
    "# min and max nights\n",
    "training['minimum_nights_log'] = training['minimum_nights'].apply(lambda x: np.log(x) if x >0 else -1)\n",
    "training['minimum_nights_avg_ntm_log'] = training['minimum_nights_avg_ntm'].apply(lambda x: np.log(x) if x >0 else -1)\n",
    "training['maximum_nights_log'] = training['maximum_nights'].apply(lambda x: np.log(x) if x >0 else -1)\n",
    "training['maximum_nights_avg_ntm_log'] = training['maximum_nights_avg_ntm'].apply(lambda x: np.log(x) if x >0 else -1)\n",
    "\n",
    "# calculated host listings count\n",
    "training['calculated_host_listings_count_log'] = training['calculated_host_listings_count'].apply(lambda x: \\\n",
    "                                                                                                 np.log(x) if x>0 else -1)\n",
    "\n",
    "# days stuff\n",
    "training['host_days_since_log'] = np.log(training['host_days_since'])\n",
    "training['days_since_first_log'] = np.log(training['days_since_first'])\n",
    "training['days_since_last_log'] = np.log(training['days_since_last'])\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "test_imputed['review_scores_accuracy_exp'] = np.exp(test_imputed['review_scores_accuracy'])\n",
    "test_imputed['review_scores_checkin_exp'] = np.exp(test_imputed['review_scores_checkin'])\n",
    "test_imputed['review_scores_cleanliness_exp'] = np.exp(test_imputed['review_scores_cleanliness'])\n",
    "test_imputed['review_scores_communication_exp'] = np.exp(test_imputed['review_scores_communication'])\n",
    "test_imputed['review_scores_location_exp'] = np.exp(test_imputed['review_scores_location'])\n",
    "test_imputed['review_scores_rating_exp'] = np.exp(test_imputed['review_scores_rating'])\n",
    "test_imputed['review_scores_value_exp'] = np.exp(test_imputed['review_scores_value'])\n",
    "\n",
    "test_imputed['minimum_nights_log'] = test_imputed['minimum_nights'].apply(lambda x: np.log(x) if x >0 else -1)\n",
    "test_imputed['minimum_nights_avg_ntm_log'] = test_imputed['minimum_nights_avg_ntm'].apply(lambda x: np.log(x) if x >0 else -1)\n",
    "test_imputed['maximum_nights_log'] = test_imputed['maximum_nights'].apply(lambda x: np.log(x) if x >0 else -1)\n",
    "test_imputed['maximum_nights_avg_ntm_log'] = test_imputed['maximum_nights_avg_ntm'].apply(lambda x: np.log(x) if x >0 else -1)\n",
    "\n",
    "test_imputed['calculated_host_listings_count_log'] = test_imputed['calculated_host_listings_count'].apply(lambda x: \\\n",
    "                                                                                                 np.log(x) if x>0 else -1)\n",
    "\n",
    "test_imputed['host_days_since_log'] = np.log(test_imputed['host_days_since'])\n",
    "test_imputed['days_since_first_log'] = np.log(test_imputed['days_since_first'])\n",
    "test_imputed['days_since_last_log'] = np.log(test_imputed['days_since_last'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "af27f8da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "review_scores_accuracy             0.103137\n",
       "review_scores_accuracy_exp         0.141500\n",
       "review_scores_checkin_exp          0.101514\n",
       "review_scores_checkin              0.069105\n",
       "review_scores_cleanliness_exp      0.188202\n",
       "review_scores_cleanliness          0.153673\n",
       "review_scores_communication_exp    0.102708\n",
       "review_scores_communication        0.072467\n",
       "review_scores_location_exp         0.222475\n",
       "review_scores_location             0.177592\n",
       "review_scores_rating_exp           0.175007\n",
       "review_scores_rating               0.129496\n",
       "review_scores_value_exp            0.073717\n",
       "review_scores_value                0.068495\n",
       "dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "training.loc[:, ['review_scores_accuracy', 'review_scores_accuracy_exp', 'review_scores_checkin_exp', 'review_scores_checkin', \\\n",
    "                'review_scores_cleanliness_exp', 'review_scores_cleanliness', 'review_scores_communication_exp',\\\n",
    "                'review_scores_communication', 'review_scores_location_exp', 'review_scores_location', \\\n",
    "                'review_scores_rating_exp', 'review_scores_rating', 'review_scores_value_exp', 'review_scores_value']].corrwith(training['log_price'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "626314be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>host_id</th>\n",
       "      <th>host_since</th>\n",
       "      <th>host_location</th>\n",
       "      <th>host_response_time</th>\n",
       "      <th>host_response_rate</th>\n",
       "      <th>host_acceptance_rate</th>\n",
       "      <th>host_is_superhost</th>\n",
       "      <th>host_neighbourhood</th>\n",
       "      <th>host_listings_count</th>\n",
       "      <th>...</th>\n",
       "      <th>review_scores_rating_exp</th>\n",
       "      <th>review_scores_value_exp</th>\n",
       "      <th>minimum_nights_log</th>\n",
       "      <th>minimum_nights_avg_ntm_log</th>\n",
       "      <th>maximum_nights_log</th>\n",
       "      <th>maximum_nights_avg_ntm_log</th>\n",
       "      <th>calculated_host_listings_count_log</th>\n",
       "      <th>host_days_since_log</th>\n",
       "      <th>days_since_first_log</th>\n",
       "      <th>days_since_last_log</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>53872917</td>\n",
       "      <td>366516391</td>\n",
       "      <td>2018-04-09</td>\n",
       "      <td>Chicago, IL</td>\n",
       "      <td>within an hour</td>\n",
       "      <td>96.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>f</td>\n",
       "      <td>Back of the Yards</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>139.770250</td>\n",
       "      <td>125.210961</td>\n",
       "      <td>3.465736</td>\n",
       "      <td>3.465736</td>\n",
       "      <td>7.025538</td>\n",
       "      <td>7.025538</td>\n",
       "      <td>2.197225</td>\n",
       "      <td>7.718241</td>\n",
       "      <td>7.504392</td>\n",
       "      <td>6.496775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>39269663</td>\n",
       "      <td>50276775</td>\n",
       "      <td>2014-12-23</td>\n",
       "      <td>Chicago, IL</td>\n",
       "      <td>within an hour</td>\n",
       "      <td>100.0</td>\n",
       "      <td>97.0</td>\n",
       "      <td>f</td>\n",
       "      <td>Clearwater Beach</td>\n",
       "      <td>1141</td>\n",
       "      <td>...</td>\n",
       "      <td>116.687243</td>\n",
       "      <td>106.524008</td>\n",
       "      <td>3.465736</td>\n",
       "      <td>3.465736</td>\n",
       "      <td>5.899897</td>\n",
       "      <td>5.899897</td>\n",
       "      <td>4.060443</td>\n",
       "      <td>8.146709</td>\n",
       "      <td>5.905362</td>\n",
       "      <td>5.257495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>556480733030442463</td>\n",
       "      <td>681680651</td>\n",
       "      <td>2020-03-08</td>\n",
       "      <td>Chicago, IL</td>\n",
       "      <td>within an hour</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>f</td>\n",
       "      <td>Lake View East</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>130.320917</td>\n",
       "      <td>121.510418</td>\n",
       "      <td>0.693147</td>\n",
       "      <td>0.693147</td>\n",
       "      <td>3.806662</td>\n",
       "      <td>3.806662</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.346010</td>\n",
       "      <td>5.768321</td>\n",
       "      <td>5.220356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>52397280</td>\n",
       "      <td>94345291</td>\n",
       "      <td>2015-10-22</td>\n",
       "      <td>Chicago, IL</td>\n",
       "      <td>within an hour</td>\n",
       "      <td>100.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>f</td>\n",
       "      <td>Bucktown</td>\n",
       "      <td>55</td>\n",
       "      <td>...</td>\n",
       "      <td>59.145470</td>\n",
       "      <td>46.993063</td>\n",
       "      <td>0.693147</td>\n",
       "      <td>0.693147</td>\n",
       "      <td>5.192957</td>\n",
       "      <td>5.192957</td>\n",
       "      <td>4.007333</td>\n",
       "      <td>8.054840</td>\n",
       "      <td>5.624018</td>\n",
       "      <td>5.204007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>745949202271858960</td>\n",
       "      <td>790998106</td>\n",
       "      <td>2021-04-04</td>\n",
       "      <td>Chicago, IL</td>\n",
       "      <td>within an hour</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>t</td>\n",
       "      <td>Near South Side</td>\n",
       "      <td>74</td>\n",
       "      <td>...</td>\n",
       "      <td>121.510418</td>\n",
       "      <td>112.168253</td>\n",
       "      <td>0.693147</td>\n",
       "      <td>0.693147</td>\n",
       "      <td>5.899897</td>\n",
       "      <td>7.025538</td>\n",
       "      <td>4.304065</td>\n",
       "      <td>7.054450</td>\n",
       "      <td>6.634633</td>\n",
       "      <td>5.204007</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 149 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   id    host_id host_since host_location host_response_time  \\\n",
       "0            53872917  366516391 2018-04-09   Chicago, IL     within an hour   \n",
       "1            39269663   50276775 2014-12-23   Chicago, IL     within an hour   \n",
       "2  556480733030442463  681680651 2020-03-08   Chicago, IL     within an hour   \n",
       "3            52397280   94345291 2015-10-22   Chicago, IL     within an hour   \n",
       "4  745949202271858960  790998106 2021-04-04   Chicago, IL     within an hour   \n",
       "\n",
       "   host_response_rate  host_acceptance_rate host_is_superhost  \\\n",
       "0                96.0                  95.0                 f   \n",
       "1               100.0                  97.0                 f   \n",
       "2               100.0                 100.0                 f   \n",
       "3               100.0                  98.0                 f   \n",
       "4               100.0                 100.0                 t   \n",
       "\n",
       "  host_neighbourhood  host_listings_count  ...  review_scores_rating_exp  \\\n",
       "0  Back of the Yards                   11  ...                139.770250   \n",
       "1   Clearwater Beach                 1141  ...                116.687243   \n",
       "2     Lake View East                    1  ...                130.320917   \n",
       "3           Bucktown                   55  ...                 59.145470   \n",
       "4    Near South Side                   74  ...                121.510418   \n",
       "\n",
       "  review_scores_value_exp minimum_nights_log minimum_nights_avg_ntm_log  \\\n",
       "0              125.210961           3.465736                   3.465736   \n",
       "1              106.524008           3.465736                   3.465736   \n",
       "2              121.510418           0.693147                   0.693147   \n",
       "3               46.993063           0.693147                   0.693147   \n",
       "4              112.168253           0.693147                   0.693147   \n",
       "\n",
       "  maximum_nights_log  maximum_nights_avg_ntm_log  \\\n",
       "0           7.025538                    7.025538   \n",
       "1           5.899897                    5.899897   \n",
       "2           3.806662                    3.806662   \n",
       "3           5.192957                    5.192957   \n",
       "4           5.899897                    7.025538   \n",
       "\n",
       "   calculated_host_listings_count_log host_days_since_log  \\\n",
       "0                            2.197225            7.718241   \n",
       "1                            4.060443            8.146709   \n",
       "2                            0.000000            7.346010   \n",
       "3                            4.007333            8.054840   \n",
       "4                            4.304065            7.054450   \n",
       "\n",
       "  days_since_first_log  days_since_last_log  \n",
       "0             7.504392             6.496775  \n",
       "1             5.905362             5.257495  \n",
       "2             5.768321             5.220356  \n",
       "3             5.624018             5.204007  \n",
       "4             6.634633             5.204007  \n",
       "\n",
       "[5 rows x 149 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "training.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6aabdab2",
   "metadata": {},
   "source": [
    "### Model for price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a98db9b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# This is the improved\n",
    "X_train = training.drop(columns = ['id', 'host_id', 'host_location', 'host_since', 'host_is_superhost', 'host_response_time',\\\n",
    "                                  'host_neighbourhood', 'host_listings_count', 'host_total_listings_count', 'host_verifications',\\\n",
    "                                  'host_has_profile_pic', 'host_identity_verified', 'neighbourhood_cleansed', 'property_type', \\\n",
    "                                 'room_type', 'bathrooms_text', 'price', 'log_price', 'minimum_minimum_nights', 'minimum_maximum_nights', \\\n",
    "                                   'maximum_maximum_nights', 'maximum_minimum_nights', 'has_availability', 'first_review', 'last_review', \\\n",
    "                                   'instant_bookable', 'reviews_per_month', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms',\\\n",
    "                             'neighborhood_price_bins', 'host_total_listings_over_2000', \n",
    "                                  \"verifications_['email', 'phone', 'work_email']\", \"verifications_['email', 'phone']\", \\\n",
    "                                  \"verifications_['email']\", \"verifications_['phone', 'work_email']\", \"verifications_['phone']\", \\\n",
    "                                 'calculated_host_listings_count_entire_homes', \\\n",
    "                                  'property_room_cleansed', 'neighbourhoods', 'within a day', 'within a few hours', 'within an hour'])\n",
    "X_test = test_imputed.drop(columns = ['id', 'host_id', 'host_location', 'host_since', 'host_is_superhost', 'host_response_time',\\\n",
    "                                  'host_neighbourhood', 'host_listings_count', 'host_total_listings_count', 'host_verifications',\\\n",
    "                                  'host_has_profile_pic', 'host_identity_verified', 'neighbourhood_cleansed', 'property_type', \\\n",
    "                                 'room_type', 'bathrooms_text', 'price', 'log_price', 'minimum_minimum_nights', 'minimum_maximum_nights', \\\n",
    "                                   'maximum_maximum_nights', 'maximum_minimum_nights', 'has_availability', 'first_review', 'last_review', \\\n",
    "                                   'instant_bookable', 'reviews_per_month', 'calculated_host_listings_count_private_rooms', 'calculated_host_listings_count_shared_rooms',\\\n",
    "                             'neighborhood_price_bins', 'host_total_listings_over_2000', \n",
    "                                  \"verifications_['email', 'phone', 'work_email']\", \"verifications_['email', 'phone']\", \\\n",
    "                                  \"verifications_['email']\", \"verifications_['phone', 'work_email']\", \"verifications_['phone']\", \\\n",
    "                                 'calculated_host_listings_count_entire_homes', \\\n",
    "                                  'property_room_cleansed', 'neighbourhoods', 'within a day', 'within a few hours', 'within an hour'])\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test = X_test.loc[:, X_train.columns]\n",
    "X_test_scaled = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2f7284ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>host_response_rate</th>\n",
       "      <th>host_acceptance_rate</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>accommodates</th>\n",
       "      <th>beds</th>\n",
       "      <th>minimum_nights</th>\n",
       "      <th>maximum_nights</th>\n",
       "      <th>minimum_nights_avg_ntm</th>\n",
       "      <th>maximum_nights_avg_ntm</th>\n",
       "      <th>...</th>\n",
       "      <th>review_scores_rating_exp</th>\n",
       "      <th>review_scores_value_exp</th>\n",
       "      <th>minimum_nights_log</th>\n",
       "      <th>minimum_nights_avg_ntm_log</th>\n",
       "      <th>maximum_nights_log</th>\n",
       "      <th>maximum_nights_avg_ntm_log</th>\n",
       "      <th>calculated_host_listings_count_log</th>\n",
       "      <th>host_days_since_log</th>\n",
       "      <th>days_since_first_log</th>\n",
       "      <th>days_since_last_log</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.149014</td>\n",
       "      <td>0.199645</td>\n",
       "      <td>-1.554284</td>\n",
       "      <td>0.005301</td>\n",
       "      <td>-1.096572</td>\n",
       "      <td>-0.750474</td>\n",
       "      <td>0.688501</td>\n",
       "      <td>1.275527</td>\n",
       "      <td>-0.070760</td>\n",
       "      <td>0.764500</td>\n",
       "      <td>...</td>\n",
       "      <td>0.738542</td>\n",
       "      <td>0.516117</td>\n",
       "      <td>1.242441</td>\n",
       "      <td>0.888843</td>\n",
       "      <td>0.943637</td>\n",
       "      <td>0.616875</td>\n",
       "      <td>0.201450</td>\n",
       "      <td>0.137143</td>\n",
       "      <td>1.164275</td>\n",
       "      <td>2.113347</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.226508</td>\n",
       "      <td>0.312429</td>\n",
       "      <td>0.015673</td>\n",
       "      <td>0.924270</td>\n",
       "      <td>2.462665</td>\n",
       "      <td>0.411489</td>\n",
       "      <td>0.688501</td>\n",
       "      <td>-0.435699</td>\n",
       "      <td>-0.070760</td>\n",
       "      <td>-0.997418</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.191537</td>\n",
       "      <td>-0.207418</td>\n",
       "      <td>1.242441</td>\n",
       "      <td>0.888843</td>\n",
       "      <td>0.126788</td>\n",
       "      <td>-0.338146</td>\n",
       "      <td>1.203080</td>\n",
       "      <td>0.755782</td>\n",
       "      <td>-0.826017</td>\n",
       "      <td>-0.461182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.226508</td>\n",
       "      <td>0.481605</td>\n",
       "      <td>0.898762</td>\n",
       "      <td>0.210279</td>\n",
       "      <td>0.521263</td>\n",
       "      <td>0.411489</td>\n",
       "      <td>-0.489808</td>\n",
       "      <td>-1.156216</td>\n",
       "      <td>-0.397791</td>\n",
       "      <td>-1.739278</td>\n",
       "      <td>...</td>\n",
       "      <td>0.357802</td>\n",
       "      <td>0.372836</td>\n",
       "      <td>-0.631551</td>\n",
       "      <td>-0.784652</td>\n",
       "      <td>-1.392220</td>\n",
       "      <td>-2.114096</td>\n",
       "      <td>-0.979734</td>\n",
       "      <td>-0.400299</td>\n",
       "      <td>-0.996590</td>\n",
       "      <td>-0.538338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.226508</td>\n",
       "      <td>0.368821</td>\n",
       "      <td>-1.446071</td>\n",
       "      <td>1.456436</td>\n",
       "      <td>-0.773005</td>\n",
       "      <td>-0.750474</td>\n",
       "      <td>-0.489808</td>\n",
       "      <td>-0.852248</td>\n",
       "      <td>-0.397791</td>\n",
       "      <td>-1.426305</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.510055</td>\n",
       "      <td>-2.512379</td>\n",
       "      <td>-0.631551</td>\n",
       "      <td>-0.784652</td>\n",
       "      <td>-0.386221</td>\n",
       "      <td>-0.937931</td>\n",
       "      <td>1.174529</td>\n",
       "      <td>0.623138</td>\n",
       "      <td>-1.176203</td>\n",
       "      <td>-0.572302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.226508</td>\n",
       "      <td>0.481605</td>\n",
       "      <td>-0.573669</td>\n",
       "      <td>0.847013</td>\n",
       "      <td>0.521263</td>\n",
       "      <td>0.411489</td>\n",
       "      <td>-0.489808</td>\n",
       "      <td>-0.435699</td>\n",
       "      <td>-0.397791</td>\n",
       "      <td>0.764500</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002802</td>\n",
       "      <td>0.011120</td>\n",
       "      <td>-0.631551</td>\n",
       "      <td>-0.784652</td>\n",
       "      <td>0.126788</td>\n",
       "      <td>0.616875</td>\n",
       "      <td>1.334046</td>\n",
       "      <td>-0.821265</td>\n",
       "      <td>0.081698</td>\n",
       "      <td>-0.572302</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 107 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   host_response_rate  host_acceptance_rate  latitude  longitude  \\\n",
       "0           -0.149014              0.199645 -1.554284   0.005301   \n",
       "1            0.226508              0.312429  0.015673   0.924270   \n",
       "2            0.226508              0.481605  0.898762   0.210279   \n",
       "3            0.226508              0.368821 -1.446071   1.456436   \n",
       "4            0.226508              0.481605 -0.573669   0.847013   \n",
       "\n",
       "   accommodates      beds  minimum_nights  maximum_nights  \\\n",
       "0     -1.096572 -0.750474        0.688501        1.275527   \n",
       "1      2.462665  0.411489        0.688501       -0.435699   \n",
       "2      0.521263  0.411489       -0.489808       -1.156216   \n",
       "3     -0.773005 -0.750474       -0.489808       -0.852248   \n",
       "4      0.521263  0.411489       -0.489808       -0.435699   \n",
       "\n",
       "   minimum_nights_avg_ntm  maximum_nights_avg_ntm  ...  \\\n",
       "0               -0.070760                0.764500  ...   \n",
       "1               -0.070760               -0.997418  ...   \n",
       "2               -0.397791               -1.739278  ...   \n",
       "3               -0.397791               -1.426305  ...   \n",
       "4               -0.397791                0.764500  ...   \n",
       "\n",
       "   review_scores_rating_exp  review_scores_value_exp  minimum_nights_log  \\\n",
       "0                  0.738542                 0.516117            1.242441   \n",
       "1                 -0.191537                -0.207418            1.242441   \n",
       "2                  0.357802                 0.372836           -0.631551   \n",
       "3                 -2.510055                -2.512379           -0.631551   \n",
       "4                  0.002802                 0.011120           -0.631551   \n",
       "\n",
       "   minimum_nights_avg_ntm_log  maximum_nights_log  maximum_nights_avg_ntm_log  \\\n",
       "0                    0.888843            0.943637                    0.616875   \n",
       "1                    0.888843            0.126788                   -0.338146   \n",
       "2                   -0.784652           -1.392220                   -2.114096   \n",
       "3                   -0.784652           -0.386221                   -0.937931   \n",
       "4                   -0.784652            0.126788                    0.616875   \n",
       "\n",
       "   calculated_host_listings_count_log  host_days_since_log  \\\n",
       "0                            0.201450             0.137143   \n",
       "1                            1.203080             0.755782   \n",
       "2                           -0.979734            -0.400299   \n",
       "3                            1.174529             0.623138   \n",
       "4                            1.334046            -0.821265   \n",
       "\n",
       "   days_since_first_log  days_since_last_log  \n",
       "0              1.164275             2.113347  \n",
       "1             -0.826017            -0.461182  \n",
       "2             -0.996590            -0.538338  \n",
       "3             -1.176203            -0.572302  \n",
       "4              0.081698            -0.572302  \n",
       "\n",
       "[5 rows x 107 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "names = X_train.columns\n",
    "# Convertin Xstd to dataframes\n",
    "boost_train = pd.DataFrame(X_train_scaled, columns=names)\n",
    "boost_test = pd.DataFrame(X_test_scaled, columns=names)\n",
    "# dropping every column whose values are only 0, should make code run much faster as well\n",
    "#train_std = train_Xstd.drop(train_Xstd.columns[(train_Xstd == 0).all()], axis=1)\n",
    "#test_std = test_Xstd.drop(test_Xstd.columns[(test_Xstd == 0).all()], axis=1)\n",
    "boost_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0b8c579b",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = training['price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "65e30710",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 50 candidates, totalling 250 fits\n",
      "[CV 1/5] END colsample_bylevel=0.35, learning_rate=0.03, n_estimators=3500, num_leaves=60, reg_lambda=6, subsample=0.9;, score=-97.186 total time=  57.1s\n",
      "[CV 2/5] END colsample_bylevel=0.35, learning_rate=0.03, n_estimators=3500, num_leaves=60, reg_lambda=6, subsample=0.9;, score=-124.760 total time=  52.0s\n",
      "[CV 3/5] END colsample_bylevel=0.35, learning_rate=0.03, n_estimators=3500, num_leaves=60, reg_lambda=6, subsample=0.9;, score=-181.103 total time=  59.8s\n",
      "[CV 4/5] END colsample_bylevel=0.35, learning_rate=0.03, n_estimators=3500, num_leaves=60, reg_lambda=6, subsample=0.9;, score=-155.615 total time=  54.2s\n",
      "[CV 5/5] END colsample_bylevel=0.35, learning_rate=0.03, n_estimators=3500, num_leaves=60, reg_lambda=6, subsample=0.9;, score=-112.162 total time=  57.2s\n",
      "[CV 1/5] END colsample_bylevel=0.25, learning_rate=0.025, n_estimators=2500, num_leaves=55, reg_lambda=6, subsample=0.85;, score=-96.142 total time=  38.2s\n",
      "[CV 2/5] END colsample_bylevel=0.25, learning_rate=0.025, n_estimators=2500, num_leaves=55, reg_lambda=6, subsample=0.85;, score=-114.367 total time=  38.4s\n",
      "[CV 3/5] END colsample_bylevel=0.25, learning_rate=0.025, n_estimators=2500, num_leaves=55, reg_lambda=6, subsample=0.85;, score=-178.251 total time=  40.2s\n",
      "[CV 4/5] END colsample_bylevel=0.25, learning_rate=0.025, n_estimators=2500, num_leaves=55, reg_lambda=6, subsample=0.85;, score=-157.139 total time=  40.9s\n",
      "[CV 5/5] END colsample_bylevel=0.25, learning_rate=0.025, n_estimators=2500, num_leaves=55, reg_lambda=6, subsample=0.85;, score=-111.341 total time=  39.3s\n",
      "[CV 1/5] END colsample_bylevel=0.325, learning_rate=0.03, n_estimators=3250, num_leaves=60, reg_lambda=5, subsample=0.85;, score=-97.226 total time=  54.7s\n",
      "[CV 2/5] END colsample_bylevel=0.325, learning_rate=0.03, n_estimators=3250, num_leaves=60, reg_lambda=5, subsample=0.85;, score=-119.604 total time=  55.7s\n",
      "[CV 3/5] END colsample_bylevel=0.325, learning_rate=0.03, n_estimators=3250, num_leaves=60, reg_lambda=5, subsample=0.85;, score=-177.866 total time=  54.7s\n",
      "[CV 4/5] END colsample_bylevel=0.325, learning_rate=0.03, n_estimators=3250, num_leaves=60, reg_lambda=5, subsample=0.85;, score=-157.080 total time=  55.8s\n",
      "[CV 5/5] END colsample_bylevel=0.325, learning_rate=0.03, n_estimators=3250, num_leaves=60, reg_lambda=5, subsample=0.85;, score=-112.918 total time=  51.3s\n",
      "[CV 1/5] END colsample_bylevel=0.35, learning_rate=0.035, n_estimators=2500, num_leaves=60, reg_lambda=4, subsample=0.9;, score=-97.177 total time=  40.6s\n",
      "[CV 2/5] END colsample_bylevel=0.35, learning_rate=0.035, n_estimators=2500, num_leaves=60, reg_lambda=4, subsample=0.9;, score=-120.331 total time=  42.2s\n",
      "[CV 3/5] END colsample_bylevel=0.35, learning_rate=0.035, n_estimators=2500, num_leaves=60, reg_lambda=4, subsample=0.9;, score=-181.777 total time=  43.5s\n",
      "[CV 4/5] END colsample_bylevel=0.35, learning_rate=0.035, n_estimators=2500, num_leaves=60, reg_lambda=4, subsample=0.9;, score=-156.708 total time=  42.1s\n",
      "[CV 5/5] END colsample_bylevel=0.35, learning_rate=0.035, n_estimators=2500, num_leaves=60, reg_lambda=4, subsample=0.9;, score=-113.088 total time=  42.0s\n",
      "[CV 1/5] END colsample_bylevel=0.25, learning_rate=0.04, n_estimators=2500, num_leaves=55, reg_lambda=5, subsample=0.85;, score=-92.353 total time=  37.3s\n",
      "[CV 2/5] END colsample_bylevel=0.25, learning_rate=0.04, n_estimators=2500, num_leaves=55, reg_lambda=5, subsample=0.85;, score=-118.081 total time=  36.6s\n",
      "[CV 3/5] END colsample_bylevel=0.25, learning_rate=0.04, n_estimators=2500, num_leaves=55, reg_lambda=5, subsample=0.85;, score=-178.867 total time=  37.8s\n",
      "[CV 4/5] END colsample_bylevel=0.25, learning_rate=0.04, n_estimators=2500, num_leaves=55, reg_lambda=5, subsample=0.85;, score=-155.826 total time=  38.4s\n",
      "[CV 5/5] END colsample_bylevel=0.25, learning_rate=0.04, n_estimators=2500, num_leaves=55, reg_lambda=5, subsample=0.85;, score=-111.701 total time=  38.4s\n",
      "[CV 1/5] END colsample_bylevel=0.3, learning_rate=0.03, n_estimators=2750, num_leaves=60, reg_lambda=4, subsample=0.925;, score=-93.807 total time=  43.8s\n",
      "[CV 2/5] END colsample_bylevel=0.3, learning_rate=0.03, n_estimators=2750, num_leaves=60, reg_lambda=4, subsample=0.925;, score=-122.231 total time=  43.0s\n",
      "[CV 3/5] END colsample_bylevel=0.3, learning_rate=0.03, n_estimators=2750, num_leaves=60, reg_lambda=4, subsample=0.925;, score=-181.547 total time=  43.2s\n",
      "[CV 4/5] END colsample_bylevel=0.3, learning_rate=0.03, n_estimators=2750, num_leaves=60, reg_lambda=4, subsample=0.925;, score=-156.675 total time=  44.5s\n",
      "[CV 5/5] END colsample_bylevel=0.3, learning_rate=0.03, n_estimators=2750, num_leaves=60, reg_lambda=4, subsample=0.925;, score=-110.574 total time=  44.7s\n",
      "[CV 1/5] END colsample_bylevel=0.3, learning_rate=0.03, n_estimators=3500, num_leaves=60, reg_lambda=4, subsample=0.85;, score=-95.286 total time= 1.2min\n",
      "[CV 2/5] END colsample_bylevel=0.3, learning_rate=0.03, n_estimators=3500, num_leaves=60, reg_lambda=4, subsample=0.85;, score=-119.719 total time= 1.6min\n",
      "[CV 3/5] END colsample_bylevel=0.3, learning_rate=0.03, n_estimators=3500, num_leaves=60, reg_lambda=4, subsample=0.85;, score=-176.737 total time= 1.6min\n",
      "[CV 4/5] END colsample_bylevel=0.3, learning_rate=0.03, n_estimators=3500, num_leaves=60, reg_lambda=4, subsample=0.85;, score=-155.365 total time= 1.7min\n",
      "[CV 5/5] END colsample_bylevel=0.3, learning_rate=0.03, n_estimators=3500, num_leaves=60, reg_lambda=4, subsample=0.85;, score=-111.517 total time= 1.7min\n",
      "[CV 1/5] END colsample_bylevel=0.35, learning_rate=0.03, n_estimators=3000, num_leaves=60, reg_lambda=4, subsample=0.875;, score=-96.338 total time= 1.6min\n",
      "[CV 2/5] END colsample_bylevel=0.35, learning_rate=0.03, n_estimators=3000, num_leaves=60, reg_lambda=4, subsample=0.875;, score=-124.573 total time= 1.5min\n",
      "[CV 3/5] END colsample_bylevel=0.35, learning_rate=0.03, n_estimators=3000, num_leaves=60, reg_lambda=4, subsample=0.875;, score=-181.028 total time= 1.5min\n",
      "[CV 4/5] END colsample_bylevel=0.35, learning_rate=0.03, n_estimators=3000, num_leaves=60, reg_lambda=4, subsample=0.875;, score=-155.410 total time= 1.6min\n",
      "[CV 5/5] END colsample_bylevel=0.35, learning_rate=0.03, n_estimators=3000, num_leaves=60, reg_lambda=4, subsample=0.875;, score=-114.474 total time= 1.6min\n",
      "[CV 1/5] END colsample_bylevel=0.25, learning_rate=0.02, n_estimators=3250, num_leaves=55, reg_lambda=5, subsample=0.95;, score=-97.341 total time= 1.4min\n",
      "[CV 2/5] END colsample_bylevel=0.25, learning_rate=0.02, n_estimators=3250, num_leaves=55, reg_lambda=5, subsample=0.95;, score=-120.492 total time= 1.4min\n",
      "[CV 3/5] END colsample_bylevel=0.25, learning_rate=0.02, n_estimators=3250, num_leaves=55, reg_lambda=5, subsample=0.95;, score=-181.072 total time= 1.4min\n",
      "[CV 4/5] END colsample_bylevel=0.25, learning_rate=0.02, n_estimators=3250, num_leaves=55, reg_lambda=5, subsample=0.95;, score=-157.392 total time= 1.4min\n",
      "[CV 5/5] END colsample_bylevel=0.25, learning_rate=0.02, n_estimators=3250, num_leaves=55, reg_lambda=5, subsample=0.95;, score=-111.240 total time= 1.4min\n",
      "[CV 1/5] END colsample_bylevel=0.325, learning_rate=0.035, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.85;, score=-93.600 total time= 1.6min\n",
      "[CV 2/5] END colsample_bylevel=0.325, learning_rate=0.035, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.85;, score=-123.640 total time= 1.6min\n",
      "[CV 3/5] END colsample_bylevel=0.325, learning_rate=0.035, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.85;, score=-179.237 total time= 1.6min\n",
      "[CV 4/5] END colsample_bylevel=0.325, learning_rate=0.035, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.85;, score=-155.561 total time= 1.6min\n",
      "[CV 5/5] END colsample_bylevel=0.325, learning_rate=0.035, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.85;, score=-112.487 total time= 1.6min\n",
      "[CV 1/5] END colsample_bylevel=0.3, learning_rate=0.03, n_estimators=3000, num_leaves=55, reg_lambda=5, subsample=0.9;, score=-97.799 total time= 1.4min\n",
      "[CV 2/5] END colsample_bylevel=0.3, learning_rate=0.03, n_estimators=3000, num_leaves=55, reg_lambda=5, subsample=0.9;, score=-120.267 total time= 1.4min\n",
      "[CV 3/5] END colsample_bylevel=0.3, learning_rate=0.03, n_estimators=3000, num_leaves=55, reg_lambda=5, subsample=0.9;, score=-181.003 total time= 1.4min\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 4/5] END colsample_bylevel=0.3, learning_rate=0.03, n_estimators=3000, num_leaves=55, reg_lambda=5, subsample=0.9;, score=-156.710 total time= 1.5min\n",
      "[CV 5/5] END colsample_bylevel=0.3, learning_rate=0.03, n_estimators=3000, num_leaves=55, reg_lambda=5, subsample=0.9;, score=-111.512 total time= 1.4min\n",
      "[CV 1/5] END colsample_bylevel=0.4, learning_rate=0.04, n_estimators=3000, num_leaves=65, reg_lambda=5, subsample=0.9;, score=-94.004 total time= 1.9min\n",
      "[CV 2/5] END colsample_bylevel=0.4, learning_rate=0.04, n_estimators=3000, num_leaves=65, reg_lambda=5, subsample=0.9;, score=-123.427 total time= 1.9min\n",
      "[CV 3/5] END colsample_bylevel=0.4, learning_rate=0.04, n_estimators=3000, num_leaves=65, reg_lambda=5, subsample=0.9;, score=-179.828 total time= 1.6min\n",
      "[CV 4/5] END colsample_bylevel=0.4, learning_rate=0.04, n_estimators=3000, num_leaves=65, reg_lambda=5, subsample=0.9;, score=-155.597 total time= 1.6min\n",
      "[CV 5/5] END colsample_bylevel=0.4, learning_rate=0.04, n_estimators=3000, num_leaves=65, reg_lambda=5, subsample=0.9;, score=-112.033 total time= 1.6min\n",
      "[CV 1/5] END colsample_bylevel=0.325, learning_rate=0.02, n_estimators=2750, num_leaves=65, reg_lambda=6, subsample=0.9;, score=-96.336 total time= 1.3min\n",
      "[CV 2/5] END colsample_bylevel=0.325, learning_rate=0.02, n_estimators=2750, num_leaves=65, reg_lambda=6, subsample=0.9;, score=-118.991 total time= 1.3min\n",
      "[CV 3/5] END colsample_bylevel=0.325, learning_rate=0.02, n_estimators=2750, num_leaves=65, reg_lambda=6, subsample=0.9;, score=-182.660 total time= 1.4min\n",
      "[CV 4/5] END colsample_bylevel=0.325, learning_rate=0.02, n_estimators=2750, num_leaves=65, reg_lambda=6, subsample=0.9;, score=-156.387 total time= 1.3min\n",
      "[CV 5/5] END colsample_bylevel=0.325, learning_rate=0.02, n_estimators=2750, num_leaves=65, reg_lambda=6, subsample=0.9;, score=-112.953 total time= 1.4min\n",
      "[CV 1/5] END colsample_bylevel=0.275, learning_rate=0.02, n_estimators=2750, num_leaves=65, reg_lambda=4, subsample=0.9;, score=-95.712 total time= 1.2min\n",
      "[CV 2/5] END colsample_bylevel=0.275, learning_rate=0.02, n_estimators=2750, num_leaves=65, reg_lambda=4, subsample=0.9;, score=-122.629 total time= 1.2min\n",
      "[CV 3/5] END colsample_bylevel=0.275, learning_rate=0.02, n_estimators=2750, num_leaves=65, reg_lambda=4, subsample=0.9;, score=-181.287 total time= 1.3min\n",
      "[CV 4/5] END colsample_bylevel=0.275, learning_rate=0.02, n_estimators=2750, num_leaves=65, reg_lambda=4, subsample=0.9;, score=-156.246 total time= 1.2min\n",
      "[CV 5/5] END colsample_bylevel=0.275, learning_rate=0.02, n_estimators=2750, num_leaves=65, reg_lambda=4, subsample=0.9;, score=-111.799 total time= 1.2min\n",
      "[CV 1/5] END colsample_bylevel=0.35, learning_rate=0.035, n_estimators=3500, num_leaves=65, reg_lambda=6, subsample=0.875;, score=-96.257 total time= 1.7min\n",
      "[CV 2/5] END colsample_bylevel=0.35, learning_rate=0.035, n_estimators=3500, num_leaves=65, reg_lambda=6, subsample=0.875;, score=-120.858 total time= 1.7min\n",
      "[CV 3/5] END colsample_bylevel=0.35, learning_rate=0.035, n_estimators=3500, num_leaves=65, reg_lambda=6, subsample=0.875;, score=-181.466 total time= 1.7min\n",
      "[CV 4/5] END colsample_bylevel=0.35, learning_rate=0.035, n_estimators=3500, num_leaves=65, reg_lambda=6, subsample=0.875;, score=-155.381 total time= 1.8min\n",
      "[CV 5/5] END colsample_bylevel=0.35, learning_rate=0.035, n_estimators=3500, num_leaves=65, reg_lambda=6, subsample=0.875;, score=-112.969 total time= 1.8min\n",
      "[CV 1/5] END colsample_bylevel=0.35, learning_rate=0.035, n_estimators=3500, num_leaves=60, reg_lambda=4, subsample=0.95;, score=-94.551 total time= 1.8min\n",
      "[CV 2/5] END colsample_bylevel=0.35, learning_rate=0.035, n_estimators=3500, num_leaves=60, reg_lambda=4, subsample=0.95;, score=-122.313 total time= 1.8min\n",
      "[CV 3/5] END colsample_bylevel=0.35, learning_rate=0.035, n_estimators=3500, num_leaves=60, reg_lambda=4, subsample=0.95;, score=-177.123 total time= 1.8min\n",
      "[CV 4/5] END colsample_bylevel=0.35, learning_rate=0.035, n_estimators=3500, num_leaves=60, reg_lambda=4, subsample=0.95;, score=-154.868 total time= 1.9min\n",
      "[CV 5/5] END colsample_bylevel=0.35, learning_rate=0.035, n_estimators=3500, num_leaves=60, reg_lambda=4, subsample=0.95;, score=-111.942 total time= 1.8min\n",
      "[CV 1/5] END colsample_bylevel=0.325, learning_rate=0.04, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.925;, score=-94.478 total time= 1.6min\n",
      "[CV 2/5] END colsample_bylevel=0.325, learning_rate=0.04, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.925;, score=-119.124 total time= 1.6min\n",
      "[CV 3/5] END colsample_bylevel=0.325, learning_rate=0.04, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.925;, score=-177.660 total time= 1.6min\n",
      "[CV 4/5] END colsample_bylevel=0.325, learning_rate=0.04, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.925;, score=-156.427 total time= 1.7min\n",
      "[CV 5/5] END colsample_bylevel=0.325, learning_rate=0.04, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.925;, score=-112.086 total time= 1.6min\n",
      "[CV 1/5] END colsample_bylevel=0.3, learning_rate=0.035, n_estimators=2500, num_leaves=65, reg_lambda=5, subsample=0.9;, score=-95.514 total time= 1.2min\n",
      "[CV 2/5] END colsample_bylevel=0.3, learning_rate=0.035, n_estimators=2500, num_leaves=65, reg_lambda=5, subsample=0.9;, score=-118.720 total time= 1.2min\n",
      "[CV 3/5] END colsample_bylevel=0.3, learning_rate=0.035, n_estimators=2500, num_leaves=65, reg_lambda=5, subsample=0.9;, score=-181.412 total time= 1.2min\n",
      "[CV 4/5] END colsample_bylevel=0.3, learning_rate=0.035, n_estimators=2500, num_leaves=65, reg_lambda=5, subsample=0.9;, score=-154.761 total time= 1.2min\n",
      "[CV 5/5] END colsample_bylevel=0.3, learning_rate=0.035, n_estimators=2500, num_leaves=65, reg_lambda=5, subsample=0.9;, score=-110.996 total time= 1.2min\n",
      "[CV 1/5] END colsample_bylevel=0.3, learning_rate=0.025, n_estimators=2500, num_leaves=65, reg_lambda=6, subsample=0.875;, score=-97.655 total time= 1.1min\n",
      "[CV 2/5] END colsample_bylevel=0.3, learning_rate=0.025, n_estimators=2500, num_leaves=65, reg_lambda=6, subsample=0.875;, score=-121.013 total time= 1.1min\n",
      "[CV 3/5] END colsample_bylevel=0.3, learning_rate=0.025, n_estimators=2500, num_leaves=65, reg_lambda=6, subsample=0.875;, score=-180.484 total time= 1.2min\n",
      "[CV 4/5] END colsample_bylevel=0.3, learning_rate=0.025, n_estimators=2500, num_leaves=65, reg_lambda=6, subsample=0.875;, score=-156.496 total time= 1.2min\n",
      "[CV 5/5] END colsample_bylevel=0.3, learning_rate=0.025, n_estimators=2500, num_leaves=65, reg_lambda=6, subsample=0.875;, score=-111.837 total time= 1.2min\n",
      "[CV 1/5] END colsample_bylevel=0.25, learning_rate=0.025, n_estimators=2500, num_leaves=60, reg_lambda=6, subsample=0.9;, score=-95.954 total time= 1.1min\n",
      "[CV 2/5] END colsample_bylevel=0.25, learning_rate=0.025, n_estimators=2500, num_leaves=60, reg_lambda=6, subsample=0.9;, score=-119.160 total time= 1.0min\n",
      "[CV 3/5] END colsample_bylevel=0.25, learning_rate=0.025, n_estimators=2500, num_leaves=60, reg_lambda=6, subsample=0.9;, score=-179.147 total time= 1.1min\n",
      "[CV 4/5] END colsample_bylevel=0.25, learning_rate=0.025, n_estimators=2500, num_leaves=60, reg_lambda=6, subsample=0.9;, score=-156.162 total time= 1.1min\n",
      "[CV 5/5] END colsample_bylevel=0.25, learning_rate=0.025, n_estimators=2500, num_leaves=60, reg_lambda=6, subsample=0.9;, score=-111.569 total time= 1.1min\n",
      "[CV 1/5] END colsample_bylevel=0.325, learning_rate=0.02, n_estimators=3500, num_leaves=55, reg_lambda=5, subsample=0.9;, score=-96.171 total time= 1.7min\n",
      "[CV 2/5] END colsample_bylevel=0.325, learning_rate=0.02, n_estimators=3500, num_leaves=55, reg_lambda=5, subsample=0.9;, score=-120.222 total time= 1.7min\n",
      "[CV 3/5] END colsample_bylevel=0.325, learning_rate=0.02, n_estimators=3500, num_leaves=55, reg_lambda=5, subsample=0.9;, score=-180.243 total time= 1.7min\n",
      "[CV 4/5] END colsample_bylevel=0.325, learning_rate=0.02, n_estimators=3500, num_leaves=55, reg_lambda=5, subsample=0.9;, score=-154.980 total time= 1.7min\n",
      "[CV 5/5] END colsample_bylevel=0.325, learning_rate=0.02, n_estimators=3500, num_leaves=55, reg_lambda=5, subsample=0.9;, score=-112.623 total time= 1.7min\n",
      "[CV 1/5] END colsample_bylevel=0.35, learning_rate=0.025, n_estimators=2500, num_leaves=65, reg_lambda=5, subsample=0.95;, score=-93.140 total time= 1.2min\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 2/5] END colsample_bylevel=0.35, learning_rate=0.025, n_estimators=2500, num_leaves=65, reg_lambda=5, subsample=0.95;, score=-118.614 total time= 1.2min\n",
      "[CV 3/5] END colsample_bylevel=0.35, learning_rate=0.025, n_estimators=2500, num_leaves=65, reg_lambda=5, subsample=0.95;, score=-180.163 total time= 1.3min\n",
      "[CV 4/5] END colsample_bylevel=0.35, learning_rate=0.025, n_estimators=2500, num_leaves=65, reg_lambda=5, subsample=0.95;, score=-156.305 total time= 1.3min\n",
      "[CV 5/5] END colsample_bylevel=0.35, learning_rate=0.025, n_estimators=2500, num_leaves=65, reg_lambda=5, subsample=0.95;, score=-111.656 total time= 1.3min\n",
      "[CV 1/5] END colsample_bylevel=0.4, learning_rate=0.04, n_estimators=2500, num_leaves=60, reg_lambda=4, subsample=0.9;, score=-98.016 total time= 1.4min\n",
      "[CV 2/5] END colsample_bylevel=0.4, learning_rate=0.04, n_estimators=2500, num_leaves=60, reg_lambda=4, subsample=0.9;, score=-126.980 total time= 1.4min\n",
      "[CV 3/5] END colsample_bylevel=0.4, learning_rate=0.04, n_estimators=2500, num_leaves=60, reg_lambda=4, subsample=0.9;, score=-179.540 total time= 1.4min\n",
      "[CV 4/5] END colsample_bylevel=0.4, learning_rate=0.04, n_estimators=2500, num_leaves=60, reg_lambda=4, subsample=0.9;, score=-158.674 total time= 1.4min\n",
      "[CV 5/5] END colsample_bylevel=0.4, learning_rate=0.04, n_estimators=2500, num_leaves=60, reg_lambda=4, subsample=0.9;, score=-114.737 total time= 1.4min\n",
      "[CV 1/5] END colsample_bylevel=0.25, learning_rate=0.03, n_estimators=3000, num_leaves=60, reg_lambda=5, subsample=0.9;, score=-94.521 total time= 1.3min\n",
      "[CV 2/5] END colsample_bylevel=0.25, learning_rate=0.03, n_estimators=3000, num_leaves=60, reg_lambda=5, subsample=0.9;, score=-123.323 total time= 1.3min\n",
      "[CV 3/5] END colsample_bylevel=0.25, learning_rate=0.03, n_estimators=3000, num_leaves=60, reg_lambda=5, subsample=0.9;, score=-179.297 total time= 1.3min\n",
      "[CV 4/5] END colsample_bylevel=0.25, learning_rate=0.03, n_estimators=3000, num_leaves=60, reg_lambda=5, subsample=0.9;, score=-154.904 total time= 1.3min\n",
      "[CV 5/5] END colsample_bylevel=0.25, learning_rate=0.03, n_estimators=3000, num_leaves=60, reg_lambda=5, subsample=0.9;, score=-111.327 total time= 1.3min\n",
      "[CV 1/5] END colsample_bylevel=0.3, learning_rate=0.025, n_estimators=3250, num_leaves=60, reg_lambda=4, subsample=0.925;, score=-94.851 total time= 1.5min\n",
      "[CV 2/5] END colsample_bylevel=0.3, learning_rate=0.025, n_estimators=3250, num_leaves=60, reg_lambda=4, subsample=0.925;, score=-119.825 total time= 1.5min\n",
      "[CV 3/5] END colsample_bylevel=0.3, learning_rate=0.025, n_estimators=3250, num_leaves=60, reg_lambda=4, subsample=0.925;, score=-178.684 total time= 1.6min\n",
      "[CV 4/5] END colsample_bylevel=0.3, learning_rate=0.025, n_estimators=3250, num_leaves=60, reg_lambda=4, subsample=0.925;, score=-156.870 total time= 1.6min\n",
      "[CV 5/5] END colsample_bylevel=0.3, learning_rate=0.025, n_estimators=3250, num_leaves=60, reg_lambda=4, subsample=0.925;, score=-110.634 total time= 1.6min\n",
      "[CV 1/5] END colsample_bylevel=0.3, learning_rate=0.035, n_estimators=3000, num_leaves=65, reg_lambda=4, subsample=0.95;, score=-98.724 total time= 1.4min\n",
      "[CV 2/5] END colsample_bylevel=0.3, learning_rate=0.035, n_estimators=3000, num_leaves=65, reg_lambda=4, subsample=0.95;, score=-120.523 total time= 1.5min\n",
      "[CV 3/5] END colsample_bylevel=0.3, learning_rate=0.035, n_estimators=3000, num_leaves=65, reg_lambda=4, subsample=0.95;, score=-181.279 total time= 1.4min\n",
      "[CV 4/5] END colsample_bylevel=0.3, learning_rate=0.035, n_estimators=3000, num_leaves=65, reg_lambda=4, subsample=0.95;, score=-158.729 total time= 1.5min\n",
      "[CV 5/5] END colsample_bylevel=0.3, learning_rate=0.035, n_estimators=3000, num_leaves=65, reg_lambda=4, subsample=0.95;, score=-110.544 total time= 1.4min\n",
      "[CV 1/5] END colsample_bylevel=0.25, learning_rate=0.035, n_estimators=2750, num_leaves=65, reg_lambda=4, subsample=0.925;, score=-95.106 total time= 1.2min\n",
      "[CV 2/5] END colsample_bylevel=0.25, learning_rate=0.035, n_estimators=2750, num_leaves=65, reg_lambda=4, subsample=0.925;, score=-118.991 total time= 1.2min\n",
      "[CV 3/5] END colsample_bylevel=0.25, learning_rate=0.035, n_estimators=2750, num_leaves=65, reg_lambda=4, subsample=0.925;, score=-179.131 total time= 1.2min\n",
      "[CV 4/5] END colsample_bylevel=0.25, learning_rate=0.035, n_estimators=2750, num_leaves=65, reg_lambda=4, subsample=0.925;, score=-157.941 total time= 1.2min\n",
      "[CV 5/5] END colsample_bylevel=0.25, learning_rate=0.035, n_estimators=2750, num_leaves=65, reg_lambda=4, subsample=0.925;, score=-111.699 total time= 1.2min\n",
      "[CV 1/5] END colsample_bylevel=0.275, learning_rate=0.025, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.9;, score=-95.534 total time= 1.5min\n",
      "[CV 2/5] END colsample_bylevel=0.275, learning_rate=0.025, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.9;, score=-120.400 total time= 1.5min\n",
      "[CV 3/5] END colsample_bylevel=0.275, learning_rate=0.025, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.9;, score=-179.122 total time= 1.5min\n",
      "[CV 4/5] END colsample_bylevel=0.275, learning_rate=0.025, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.9;, score=-155.306 total time= 1.5min\n",
      "[CV 5/5] END colsample_bylevel=0.275, learning_rate=0.025, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.9;, score=-110.719 total time= 1.4min\n",
      "[CV 1/5] END colsample_bylevel=0.325, learning_rate=0.02, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.85;, score=-95.670 total time= 1.5min\n",
      "[CV 2/5] END colsample_bylevel=0.325, learning_rate=0.02, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.85;, score=-123.154 total time= 1.6min\n",
      "[CV 3/5] END colsample_bylevel=0.325, learning_rate=0.02, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.85;, score=-179.955 total time= 1.6min\n",
      "[CV 4/5] END colsample_bylevel=0.325, learning_rate=0.02, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.85;, score=-156.029 total time= 1.6min\n",
      "[CV 5/5] END colsample_bylevel=0.325, learning_rate=0.02, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.85;, score=-111.189 total time= 1.6min\n",
      "[CV 1/5] END colsample_bylevel=0.275, learning_rate=0.035, n_estimators=2750, num_leaves=65, reg_lambda=6, subsample=0.925;, score=-94.021 total time= 1.2min\n",
      "[CV 2/5] END colsample_bylevel=0.275, learning_rate=0.035, n_estimators=2750, num_leaves=65, reg_lambda=6, subsample=0.925;, score=-120.444 total time= 1.2min\n",
      "[CV 3/5] END colsample_bylevel=0.275, learning_rate=0.035, n_estimators=2750, num_leaves=65, reg_lambda=6, subsample=0.925;, score=-182.984 total time= 1.2min\n",
      "[CV 4/5] END colsample_bylevel=0.275, learning_rate=0.035, n_estimators=2750, num_leaves=65, reg_lambda=6, subsample=0.925;, score=-153.429 total time= 1.3min\n",
      "[CV 5/5] END colsample_bylevel=0.275, learning_rate=0.035, n_estimators=2750, num_leaves=65, reg_lambda=6, subsample=0.925;, score=-111.898 total time= 1.2min\n",
      "[CV 1/5] END colsample_bylevel=0.25, learning_rate=0.04, n_estimators=3500, num_leaves=65, reg_lambda=4, subsample=0.85;, score=-94.778 total time= 1.5min\n",
      "[CV 2/5] END colsample_bylevel=0.25, learning_rate=0.04, n_estimators=3500, num_leaves=65, reg_lambda=4, subsample=0.85;, score=-120.150 total time= 1.5min\n",
      "[CV 3/5] END colsample_bylevel=0.25, learning_rate=0.04, n_estimators=3500, num_leaves=65, reg_lambda=4, subsample=0.85;, score=-181.701 total time= 1.5min\n",
      "[CV 4/5] END colsample_bylevel=0.25, learning_rate=0.04, n_estimators=3500, num_leaves=65, reg_lambda=4, subsample=0.85;, score=-156.652 total time= 1.5min\n",
      "[CV 5/5] END colsample_bylevel=0.25, learning_rate=0.04, n_estimators=3500, num_leaves=65, reg_lambda=4, subsample=0.85;, score=-111.626 total time= 1.5min\n",
      "[CV 1/5] END colsample_bylevel=0.4, learning_rate=0.03, n_estimators=3500, num_leaves=65, reg_lambda=4, subsample=0.85;, score=-95.059 total time= 1.9min\n",
      "[CV 2/5] END colsample_bylevel=0.4, learning_rate=0.03, n_estimators=3500, num_leaves=65, reg_lambda=4, subsample=0.85;, score=-121.166 total time= 1.9min\n",
      "[CV 3/5] END colsample_bylevel=0.4, learning_rate=0.03, n_estimators=3500, num_leaves=65, reg_lambda=4, subsample=0.85;, score=-180.276 total time= 1.9min\n",
      "[CV 4/5] END colsample_bylevel=0.4, learning_rate=0.03, n_estimators=3500, num_leaves=65, reg_lambda=4, subsample=0.85;, score=-154.599 total time= 2.0min\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 5/5] END colsample_bylevel=0.4, learning_rate=0.03, n_estimators=3500, num_leaves=65, reg_lambda=4, subsample=0.85;, score=-112.584 total time= 2.0min\n",
      "[CV 1/5] END colsample_bylevel=0.4, learning_rate=0.03, n_estimators=2750, num_leaves=55, reg_lambda=4, subsample=0.875;, score=-97.299 total time= 1.5min\n",
      "[CV 2/5] END colsample_bylevel=0.4, learning_rate=0.03, n_estimators=2750, num_leaves=55, reg_lambda=4, subsample=0.875;, score=-121.749 total time= 1.5min\n",
      "[CV 3/5] END colsample_bylevel=0.4, learning_rate=0.03, n_estimators=2750, num_leaves=55, reg_lambda=4, subsample=0.875;, score=-176.548 total time= 1.6min\n",
      "[CV 4/5] END colsample_bylevel=0.4, learning_rate=0.03, n_estimators=2750, num_leaves=55, reg_lambda=4, subsample=0.875;, score=-155.147 total time= 1.5min\n",
      "[CV 5/5] END colsample_bylevel=0.4, learning_rate=0.03, n_estimators=2750, num_leaves=55, reg_lambda=4, subsample=0.875;, score=-111.695 total time= 1.5min\n",
      "[CV 1/5] END colsample_bylevel=0.25, learning_rate=0.04, n_estimators=3000, num_leaves=65, reg_lambda=6, subsample=0.875;, score=-94.219 total time= 1.3min\n",
      "[CV 2/5] END colsample_bylevel=0.25, learning_rate=0.04, n_estimators=3000, num_leaves=65, reg_lambda=6, subsample=0.875;, score=-122.482 total time= 1.3min\n",
      "[CV 3/5] END colsample_bylevel=0.25, learning_rate=0.04, n_estimators=3000, num_leaves=65, reg_lambda=6, subsample=0.875;, score=-180.904 total time= 1.3min\n",
      "[CV 4/5] END colsample_bylevel=0.25, learning_rate=0.04, n_estimators=3000, num_leaves=65, reg_lambda=6, subsample=0.875;, score=-156.983 total time= 1.3min\n",
      "[CV 5/5] END colsample_bylevel=0.25, learning_rate=0.04, n_estimators=3000, num_leaves=65, reg_lambda=6, subsample=0.875;, score=-109.983 total time= 1.3min\n",
      "[CV 1/5] END colsample_bylevel=0.325, learning_rate=0.04, n_estimators=3250, num_leaves=55, reg_lambda=5, subsample=0.85;, score=-97.667 total time= 1.6min\n",
      "[CV 2/5] END colsample_bylevel=0.325, learning_rate=0.04, n_estimators=3250, num_leaves=55, reg_lambda=5, subsample=0.85;, score=-119.098 total time= 1.5min\n",
      "[CV 3/5] END colsample_bylevel=0.325, learning_rate=0.04, n_estimators=3250, num_leaves=55, reg_lambda=5, subsample=0.85;, score=-181.744 total time= 1.5min\n",
      "[CV 4/5] END colsample_bylevel=0.325, learning_rate=0.04, n_estimators=3250, num_leaves=55, reg_lambda=5, subsample=0.85;, score=-157.885 total time= 1.6min\n",
      "[CV 5/5] END colsample_bylevel=0.325, learning_rate=0.04, n_estimators=3250, num_leaves=55, reg_lambda=5, subsample=0.85;, score=-111.640 total time= 1.6min\n",
      "[CV 1/5] END colsample_bylevel=0.3, learning_rate=0.03, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.9;, score=-95.962 total time= 1.5min\n",
      "[CV 2/5] END colsample_bylevel=0.3, learning_rate=0.03, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.9;, score=-120.324 total time= 1.5min\n",
      "[CV 3/5] END colsample_bylevel=0.3, learning_rate=0.03, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.9;, score=-179.983 total time= 1.5min\n",
      "[CV 4/5] END colsample_bylevel=0.3, learning_rate=0.03, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.9;, score=-156.621 total time= 1.6min\n",
      "[CV 5/5] END colsample_bylevel=0.3, learning_rate=0.03, n_estimators=3250, num_leaves=65, reg_lambda=6, subsample=0.9;, score=-111.905 total time= 1.5min\n",
      "[CV 1/5] END colsample_bylevel=0.325, learning_rate=0.025, n_estimators=2500, num_leaves=55, reg_lambda=5, subsample=0.875;, score=-98.337 total time= 1.2min\n",
      "[CV 2/5] END colsample_bylevel=0.325, learning_rate=0.025, n_estimators=2500, num_leaves=55, reg_lambda=5, subsample=0.875;, score=-122.111 total time= 1.2min\n",
      "[CV 3/5] END colsample_bylevel=0.325, learning_rate=0.025, n_estimators=2500, num_leaves=55, reg_lambda=5, subsample=0.875;, score=-179.401 total time= 1.2min\n",
      "[CV 4/5] END colsample_bylevel=0.325, learning_rate=0.025, n_estimators=2500, num_leaves=55, reg_lambda=5, subsample=0.875;, score=-157.615 total time= 1.2min\n",
      "[CV 5/5] END colsample_bylevel=0.325, learning_rate=0.025, n_estimators=2500, num_leaves=55, reg_lambda=5, subsample=0.875;, score=-112.091 total time= 1.2min\n",
      "[CV 1/5] END colsample_bylevel=0.275, learning_rate=0.02, n_estimators=3500, num_leaves=65, reg_lambda=4, subsample=0.9;, score=-95.473 total time= 1.6min\n",
      "[CV 2/5] END colsample_bylevel=0.275, learning_rate=0.02, n_estimators=3500, num_leaves=65, reg_lambda=4, subsample=0.9;, score=-122.684 total time= 1.6min\n",
      "[CV 3/5] END colsample_bylevel=0.275, learning_rate=0.02, n_estimators=3500, num_leaves=65, reg_lambda=4, subsample=0.9;, score=-181.060 total time= 1.6min\n",
      "[CV 4/5] END colsample_bylevel=0.275, learning_rate=0.02, n_estimators=3500, num_leaves=65, reg_lambda=4, subsample=0.9;, score=-155.889 total time= 1.6min\n",
      "[CV 5/5] END colsample_bylevel=0.275, learning_rate=0.02, n_estimators=3500, num_leaves=65, reg_lambda=4, subsample=0.9;, score=-111.681 total time= 1.6min\n",
      "[CV 1/5] END colsample_bylevel=0.3, learning_rate=0.025, n_estimators=2750, num_leaves=65, reg_lambda=6, subsample=0.875;, score=-97.621 total time= 1.3min\n",
      "[CV 2/5] END colsample_bylevel=0.3, learning_rate=0.025, n_estimators=2750, num_leaves=65, reg_lambda=6, subsample=0.875;, score=-121.126 total time= 1.3min\n",
      "[CV 3/5] END colsample_bylevel=0.3, learning_rate=0.025, n_estimators=2750, num_leaves=65, reg_lambda=6, subsample=0.875;, score=-180.421 total time= 1.3min\n",
      "[CV 4/5] END colsample_bylevel=0.3, learning_rate=0.025, n_estimators=2750, num_leaves=65, reg_lambda=6, subsample=0.875;, score=-156.381 total time= 1.3min\n",
      "[CV 5/5] END colsample_bylevel=0.3, learning_rate=0.025, n_estimators=2750, num_leaves=65, reg_lambda=6, subsample=0.875;, score=-111.663 total time= 1.3min\n",
      "[CV 1/5] END colsample_bylevel=0.4, learning_rate=0.025, n_estimators=3250, num_leaves=65, reg_lambda=4, subsample=0.875;, score=-93.954 total time= 1.8min\n",
      "[CV 2/5] END colsample_bylevel=0.4, learning_rate=0.025, n_estimators=3250, num_leaves=65, reg_lambda=4, subsample=0.875;, score=-124.761 total time= 1.8min\n",
      "[CV 3/5] END colsample_bylevel=0.4, learning_rate=0.025, n_estimators=3250, num_leaves=65, reg_lambda=4, subsample=0.875;, score=-179.721 total time= 1.8min\n",
      "[CV 4/5] END colsample_bylevel=0.4, learning_rate=0.025, n_estimators=3250, num_leaves=65, reg_lambda=4, subsample=0.875;, score=-156.762 total time= 1.8min\n",
      "[CV 5/5] END colsample_bylevel=0.4, learning_rate=0.025, n_estimators=3250, num_leaves=65, reg_lambda=4, subsample=0.875;, score=-111.688 total time= 1.8min\n",
      "[CV 1/5] END colsample_bylevel=0.325, learning_rate=0.04, n_estimators=3250, num_leaves=55, reg_lambda=4, subsample=0.9;, score=-96.326 total time= 1.6min\n",
      "[CV 2/5] END colsample_bylevel=0.325, learning_rate=0.04, n_estimators=3250, num_leaves=55, reg_lambda=4, subsample=0.9;, score=-121.495 total time= 1.6min\n",
      "[CV 3/5] END colsample_bylevel=0.325, learning_rate=0.04, n_estimators=3250, num_leaves=55, reg_lambda=4, subsample=0.9;, score=-179.495 total time= 1.6min\n",
      "[CV 4/5] END colsample_bylevel=0.325, learning_rate=0.04, n_estimators=3250, num_leaves=55, reg_lambda=4, subsample=0.9;, score=-155.070 total time= 1.7min\n",
      "[CV 5/5] END colsample_bylevel=0.325, learning_rate=0.04, n_estimators=3250, num_leaves=55, reg_lambda=4, subsample=0.9;, score=-111.979 total time= 1.6min\n",
      "[CV 1/5] END colsample_bylevel=0.4, learning_rate=0.035, n_estimators=2750, num_leaves=55, reg_lambda=5, subsample=0.925;, score=-95.839 total time= 1.5min\n",
      "[CV 2/5] END colsample_bylevel=0.4, learning_rate=0.035, n_estimators=2750, num_leaves=55, reg_lambda=5, subsample=0.925;, score=-123.997 total time= 1.5min\n",
      "[CV 3/5] END colsample_bylevel=0.4, learning_rate=0.035, n_estimators=2750, num_leaves=55, reg_lambda=5, subsample=0.925;, score=-177.672 total time= 1.5min\n",
      "[CV 4/5] END colsample_bylevel=0.4, learning_rate=0.035, n_estimators=2750, num_leaves=55, reg_lambda=5, subsample=0.925;, score=-156.570 total time= 1.6min\n",
      "[CV 5/5] END colsample_bylevel=0.4, learning_rate=0.035, n_estimators=2750, num_leaves=55, reg_lambda=5, subsample=0.925;, score=-111.145 total time= 1.5min\n",
      "[CV 1/5] END colsample_bylevel=0.35, learning_rate=0.035, n_estimators=3500, num_leaves=60, reg_lambda=6, subsample=0.95;, score=-93.256 total time= 1.8min\n",
      "[CV 2/5] END colsample_bylevel=0.35, learning_rate=0.035, n_estimators=3500, num_leaves=60, reg_lambda=6, subsample=0.95;, score=-122.542 total time= 1.8min\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 3/5] END colsample_bylevel=0.35, learning_rate=0.035, n_estimators=3500, num_leaves=60, reg_lambda=6, subsample=0.95;, score=-181.688 total time= 1.8min\n",
      "[CV 4/5] END colsample_bylevel=0.35, learning_rate=0.035, n_estimators=3500, num_leaves=60, reg_lambda=6, subsample=0.95;, score=-154.526 total time= 1.9min\n",
      "[CV 5/5] END colsample_bylevel=0.35, learning_rate=0.035, n_estimators=3500, num_leaves=60, reg_lambda=6, subsample=0.95;, score=-109.567 total time= 1.9min\n",
      "[CV 1/5] END colsample_bylevel=0.25, learning_rate=0.035, n_estimators=2750, num_leaves=55, reg_lambda=5, subsample=0.925;, score=-96.217 total time= 1.2min\n",
      "[CV 2/5] END colsample_bylevel=0.25, learning_rate=0.035, n_estimators=2750, num_leaves=55, reg_lambda=5, subsample=0.925;, score=-117.142 total time= 1.2min\n",
      "[CV 3/5] END colsample_bylevel=0.25, learning_rate=0.035, n_estimators=2750, num_leaves=55, reg_lambda=5, subsample=0.925;, score=-178.006 total time= 1.3min\n",
      "[CV 4/5] END colsample_bylevel=0.25, learning_rate=0.035, n_estimators=2750, num_leaves=55, reg_lambda=5, subsample=0.925;, score=-156.885 total time= 1.2min\n",
      "[CV 5/5] END colsample_bylevel=0.25, learning_rate=0.035, n_estimators=2750, num_leaves=55, reg_lambda=5, subsample=0.925;, score=-110.169 total time= 1.2min\n",
      "[CV 1/5] END colsample_bylevel=0.25, learning_rate=0.025, n_estimators=3500, num_leaves=60, reg_lambda=6, subsample=0.875;, score=-93.131 total time= 1.5min\n",
      "[CV 2/5] END colsample_bylevel=0.25, learning_rate=0.025, n_estimators=3500, num_leaves=60, reg_lambda=6, subsample=0.875;, score=-120.507 total time= 1.5min\n",
      "[CV 3/5] END colsample_bylevel=0.25, learning_rate=0.025, n_estimators=3500, num_leaves=60, reg_lambda=6, subsample=0.875;, score=-181.658 total time= 1.5min\n",
      "[CV 4/5] END colsample_bylevel=0.25, learning_rate=0.025, n_estimators=3500, num_leaves=60, reg_lambda=6, subsample=0.875;, score=-154.745 total time= 1.5min\n",
      "[CV 5/5] END colsample_bylevel=0.25, learning_rate=0.025, n_estimators=3500, num_leaves=60, reg_lambda=6, subsample=0.875;, score=-110.927 total time= 1.5min\n",
      "[CV 1/5] END colsample_bylevel=0.325, learning_rate=0.035, n_estimators=2500, num_leaves=60, reg_lambda=5, subsample=0.95;, score=-102.064 total time= 1.3min\n",
      "[CV 2/5] END colsample_bylevel=0.325, learning_rate=0.035, n_estimators=2500, num_leaves=60, reg_lambda=5, subsample=0.95;, score=-122.105 total time= 1.3min\n",
      "[CV 3/5] END colsample_bylevel=0.325, learning_rate=0.035, n_estimators=2500, num_leaves=60, reg_lambda=5, subsample=0.95;, score=-177.213 total time= 1.2min\n",
      "[CV 4/5] END colsample_bylevel=0.325, learning_rate=0.035, n_estimators=2500, num_leaves=60, reg_lambda=5, subsample=0.95;, score=-156.470 total time= 1.3min\n",
      "[CV 5/5] END colsample_bylevel=0.325, learning_rate=0.035, n_estimators=2500, num_leaves=60, reg_lambda=5, subsample=0.95;, score=-110.932 total time= 1.2min\n",
      "[CV 1/5] END colsample_bylevel=0.35, learning_rate=0.025, n_estimators=2500, num_leaves=55, reg_lambda=4, subsample=0.95;, score=-94.730 total time= 1.3min\n",
      "[CV 2/5] END colsample_bylevel=0.35, learning_rate=0.025, n_estimators=2500, num_leaves=55, reg_lambda=4, subsample=0.95;, score=-122.170 total time= 1.3min\n",
      "[CV 3/5] END colsample_bylevel=0.35, learning_rate=0.025, n_estimators=2500, num_leaves=55, reg_lambda=4, subsample=0.95;, score=-179.651 total time= 1.3min\n",
      "[CV 4/5] END colsample_bylevel=0.35, learning_rate=0.025, n_estimators=2500, num_leaves=55, reg_lambda=4, subsample=0.95;, score=-156.030 total time= 1.3min\n",
      "[CV 5/5] END colsample_bylevel=0.35, learning_rate=0.025, n_estimators=2500, num_leaves=55, reg_lambda=4, subsample=0.95;, score=-111.508 total time= 1.3min\n",
      "[CV 1/5] END colsample_bylevel=0.4, learning_rate=0.04, n_estimators=2750, num_leaves=65, reg_lambda=4, subsample=0.85;, score=-98.556 total time= 1.5min\n",
      "[CV 2/5] END colsample_bylevel=0.4, learning_rate=0.04, n_estimators=2750, num_leaves=65, reg_lambda=4, subsample=0.85;, score=-121.976 total time= 1.5min\n",
      "[CV 3/5] END colsample_bylevel=0.4, learning_rate=0.04, n_estimators=2750, num_leaves=65, reg_lambda=4, subsample=0.85;, score=-178.226 total time= 1.5min\n",
      "[CV 4/5] END colsample_bylevel=0.4, learning_rate=0.04, n_estimators=2750, num_leaves=65, reg_lambda=4, subsample=0.85;, score=-156.475 total time= 1.6min\n",
      "[CV 5/5] END colsample_bylevel=0.4, learning_rate=0.04, n_estimators=2750, num_leaves=65, reg_lambda=4, subsample=0.85;, score=-113.850 total time= 1.5min\n",
      "[CV 1/5] END colsample_bylevel=0.25, learning_rate=0.03, n_estimators=3000, num_leaves=55, reg_lambda=4, subsample=0.9;, score=-94.638 total time= 1.3min\n",
      "[CV 2/5] END colsample_bylevel=0.25, learning_rate=0.03, n_estimators=3000, num_leaves=55, reg_lambda=4, subsample=0.9;, score=-119.981 total time= 1.3min\n",
      "[CV 3/5] END colsample_bylevel=0.25, learning_rate=0.03, n_estimators=3000, num_leaves=55, reg_lambda=4, subsample=0.9;, score=-179.534 total time= 1.3min\n",
      "[CV 4/5] END colsample_bylevel=0.25, learning_rate=0.03, n_estimators=3000, num_leaves=55, reg_lambda=4, subsample=0.9;, score=-155.802 total time= 1.3min\n",
      "[CV 5/5] END colsample_bylevel=0.25, learning_rate=0.03, n_estimators=3000, num_leaves=55, reg_lambda=4, subsample=0.9;, score=-113.072 total time= 1.3min\n",
      "[CV 1/5] END colsample_bylevel=0.25, learning_rate=0.04, n_estimators=3500, num_leaves=60, reg_lambda=4, subsample=0.85;, score=-96.022 total time= 1.5min\n",
      "[CV 2/5] END colsample_bylevel=0.25, learning_rate=0.04, n_estimators=3500, num_leaves=60, reg_lambda=4, subsample=0.85;, score=-118.187 total time= 1.5min\n",
      "[CV 3/5] END colsample_bylevel=0.25, learning_rate=0.04, n_estimators=3500, num_leaves=60, reg_lambda=4, subsample=0.85;, score=-178.424 total time= 1.5min\n",
      "[CV 4/5] END colsample_bylevel=0.25, learning_rate=0.04, n_estimators=3500, num_leaves=60, reg_lambda=4, subsample=0.85;, score=-155.221 total time= 1.5min\n",
      "[CV 5/5] END colsample_bylevel=0.25, learning_rate=0.04, n_estimators=3500, num_leaves=60, reg_lambda=4, subsample=0.85;, score=-111.998 total time= 1.5min\n",
      "Optimal parameter values = {'subsample': 0.85, 'reg_lambda': 5, 'num_leaves': 55, 'n_estimators': 2500, 'learning_rate': 0.04, 'colsample_bylevel': 0.25}\n",
      "Optimal cross validation RMSE =  -131.36542734592456\n"
     ]
    }
   ],
   "source": [
    "#K-fold cross validation to find optimal parameters for CatBoost regressor\n",
    "param_grid = {'num_leaves': [55, 60, 65],\n",
    "              'learning_rate': [0.02, 0.025, 0.03, .035, .04],\n",
    "               'reg_lambda':[4,5,6],\n",
    "                'n_estimators':[2500, 2750, 3000, 3250, 3500],\n",
    "                'subsample': [.85, .875, .9, .925, .95],\n",
    "             'colsample_bylevel': [.25, .275, 0.3, .325, .35, .4]}\n",
    "\n",
    "cv = KFold(n_splits=5,shuffle=True,random_state=1)\n",
    "optimal_params = RandomizedSearchCV(estimator=CatBoostRegressor(random_state=1, verbose=False, \n",
    "                            grow_policy='Lossguide', thread_count = -1),                                                       \n",
    "                             param_distributions = param_grid, n_iter = 50,\n",
    "                             verbose = 3,random_state = 1, scoring='neg_root_mean_squared_error',\n",
    "                             cv = cv)\n",
    "optimal_params.fit(boost_train,y)\n",
    "print(\"Optimal parameter values =\", optimal_params.best_params_)\n",
    "print(\"Optimal cross validation RMSE = \",optimal_params.best_score_)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4cab3e5",
   "metadata": {},
   "source": [
    "Optimal parameter values = {'subsample': 0.85, 'reg_lambda': 5, 'num_leaves': 55, 'n_estimators': 2500, 'learning_rate': 0.04, 'colsample_bylevel': 0.25}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "id": "26b23993",
   "metadata": {},
   "outputs": [],
   "source": [
    "cbc1 = CatBoostRegressor(subsample = .875, reg_lambda = 10, n_estimators = 2500, max_depth = 6, learning_rate = .04, \\\n",
    "                    colsample_bylevel= .625, early_stopping_rounds=40, random_state=1, verbose=False, \\\n",
    "                            grow_policy='Lossguide').fit(boost_train, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "id": "27a11e1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([48, 50, 52, 55], dtype=int64),)"
      ]
     },
     "execution_count": 230,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.where(cat_boost.feature_importances_<.005)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "id": "fd2bc4f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "boost_train_less = boost_train.iloc[:, np.where(cat_boost.feature_importances_>.005)[0]]\n",
    "boost_test_less = boost_test.iloc[:, np.where(cat_boost.feature_importances_>.005)[0]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "id": "82051915",
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_boost = CatBoostRegressor(verbose = False, random_state=1).fit(boost_train_less, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "id": "9e99805e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([9.94036767e-03, 1.53429182e-02, 1.55007095e-02, 1.88947188e-02,\n",
       "       2.11902508e-02, 2.82727561e-02, 3.06366121e-02, 3.83052494e-02,\n",
       "       5.31979248e-02, 5.97418374e-02, 6.38307785e-02, 7.40056944e-02,\n",
       "       1.24956391e-01, 1.25170584e-01, 1.74965838e-01, 2.12209046e-01,\n",
       "       2.40419720e-01, 2.47315529e-01, 3.11626784e-01, 4.62804561e-01,\n",
       "       4.90159367e-01, 5.09544834e-01, 5.61465667e-01, 5.65667417e-01,\n",
       "       5.93795609e-01, 6.87348307e-01, 8.45662523e-01, 8.52815947e-01,\n",
       "       1.07782517e+00, 1.11191643e+00, 1.20377455e+00, 1.23030177e+00,\n",
       "       1.23996378e+00, 1.31498308e+00, 1.31902405e+00, 1.49102077e+00,\n",
       "       1.70587861e+00, 1.74826310e+00, 1.81642973e+00, 2.00558447e+00,\n",
       "       2.09987291e+00, 2.24769142e+00, 2.45974633e+00, 2.46649454e+00,\n",
       "       2.54282128e+00, 3.07799418e+00, 4.25940353e+00, 4.51409289e+00,\n",
       "       5.01513846e+00, 7.84918392e+00, 1.53332944e+01, 2.34345127e+01])"
      ]
     },
     "execution_count": 235,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sort(cat_boost.feature_importances_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "id": "21b235ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      -0.522021\n",
       "1       1.959694\n",
       "2      -0.522021\n",
       "3      -0.522021\n",
       "4       0.718837\n",
       "          ...   \n",
       "4982   -0.522021\n",
       "4983   -0.522021\n",
       "4984   -0.522021\n",
       "4985   -0.522021\n",
       "4986    0.718837\n",
       "Name: baths, Length: 4987, dtype: float64"
      ]
     },
     "execution_count": 234,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "boost_train.iloc[:, 18]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "id": "79a49909",
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_prediction = cbc1.predict(boost_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "id": "47fb851d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "156.9162340745549"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cat_prediction.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "id": "73e01c52",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1728.4157075854025"
      ]
     },
     "execution_count": 244,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cat_prediction.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14fdf9b0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 100 candidates, totalling 500 fits\n"
     ]
    }
   ],
   "source": [
    "#K-fold cross validation to find optimal parameters for CatBoost regressor\n",
    "param_grid = {'learning_rate': [0.03, 0.05, .07],\n",
    "               'reg_lambda':[1 ,3, 5, 7, 9],\n",
    "                'n_estimators':[3000, 3500, 4000, 4500, 5000],\n",
    "                'subsample': [.7, .8, .9, 1.0],\n",
    "             'colsample_bylevel': [.2, .25, 0.3, .35, .4]}\n",
    "\n",
    "cv = KFold(n_splits=5,shuffle=True,random_state=1)\n",
    "optimal_params = RandomizedSearchCV(estimator=CatBoostRegressor(random_state=1, verbose=False, \n",
    "                            grow_policy='SymmetricTree', thread_count = -1),                                                       \n",
    "                             param_distributions = param_grid, n_iter = 100,\n",
    "                             verbose = 3,random_state = 1, scoring='neg_root_mean_squared_error',\n",
    "                             n_jobs=-1,\n",
    "                             cv = cv)\n",
    "optimal_params.fit(boost_train,y)\n",
    "print(\"Optimal parameter values =\", optimal_params.best_params_)\n",
    "print(\"Optimal cross validation RMSE = \",optimal_params.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "e1d0c7c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "rfr = RandomForestRegressor(n_estimators = 1000).fit(boost_train, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "7bc178a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "boost_train_less = boost_train.iloc[:, np.where(rfr.feature_importances_ > .001)[0]]\n",
    "boost_test_less = boost_test.iloc[:, np.where(rfr.feature_importances_ > .001)[0]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "c00d7ce6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4987, 63)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "boost_train_less.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "6aa2f31d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4987, 107)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "boost_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "5a634188",
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_lossguide = CatBoostRegressor(random_state=1, verbose = False, grow_policy='Lossguide', \\\n",
    "                                       subsample = .975, reg_lambda=2, num_leaves = 60, n_estimators = 2625, \\\n",
    "                                       learning_rate = 0.035, colsample_bylevel = .275)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "2133a3dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "133.479006187734"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "-np.mean(cross_val_score(cat_lossguide, boost_train_less, y, cv = 5, scoring='neg_root_mean_squared_error', n_jobs=-1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "1030de0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_symmetric = CatBoostRegressor(random_state=1, verbose = False, grow_policy='SymmetricTree', \\\n",
    "                                       subsample = .925, reg_lambda=3, n_estimators = 2500, \\\n",
    "                                       learning_rate = 0.05, colsample_bylevel = .175)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "9b3a202d",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[34], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;241m-\u001b[39mnp\u001b[38;5;241m.\u001b[39mmean(cross_val_score(cat_symmetric, boost_train_less, y, cv \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m5\u001b[39m, scoring\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mneg_root_mean_squared_error\u001b[39m\u001b[38;5;124m'\u001b[39m, n_jobs\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m))\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\utils\\_param_validation.py:213\u001b[0m, in \u001b[0;36mvalidate_params.<locals>.decorator.<locals>.wrapper\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    207\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m    208\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m config_context(\n\u001b[0;32m    209\u001b[0m         skip_parameter_validation\u001b[38;5;241m=\u001b[39m(\n\u001b[0;32m    210\u001b[0m             prefer_skip_nested_validation \u001b[38;5;129;01mor\u001b[39;00m global_skip_validation\n\u001b[0;32m    211\u001b[0m         )\n\u001b[0;32m    212\u001b[0m     ):\n\u001b[1;32m--> 213\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m func(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    214\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m InvalidParameterError \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m    215\u001b[0m     \u001b[38;5;66;03m# When the function is just a wrapper around an estimator, we allow\u001b[39;00m\n\u001b[0;32m    216\u001b[0m     \u001b[38;5;66;03m# the function to delegate validation to the estimator, but we replace\u001b[39;00m\n\u001b[0;32m    217\u001b[0m     \u001b[38;5;66;03m# the name of the estimator by the name of the function in the error\u001b[39;00m\n\u001b[0;32m    218\u001b[0m     \u001b[38;5;66;03m# message to avoid confusion.\u001b[39;00m\n\u001b[0;32m    219\u001b[0m     msg \u001b[38;5;241m=\u001b[39m re\u001b[38;5;241m.\u001b[39msub(\n\u001b[0;32m    220\u001b[0m         \u001b[38;5;124mr\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mparameter of \u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124mw+ must be\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    221\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mparameter of \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mfunc\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__qualname__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m must be\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    222\u001b[0m         \u001b[38;5;28mstr\u001b[39m(e),\n\u001b[0;32m    223\u001b[0m     )\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\model_selection\\_validation.py:719\u001b[0m, in \u001b[0;36mcross_val_score\u001b[1;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, params, pre_dispatch, error_score)\u001b[0m\n\u001b[0;32m    716\u001b[0m \u001b[38;5;66;03m# To ensure multimetric format is not supported\u001b[39;00m\n\u001b[0;32m    717\u001b[0m scorer \u001b[38;5;241m=\u001b[39m check_scoring(estimator, scoring\u001b[38;5;241m=\u001b[39mscoring)\n\u001b[1;32m--> 719\u001b[0m cv_results \u001b[38;5;241m=\u001b[39m cross_validate(\n\u001b[0;32m    720\u001b[0m     estimator\u001b[38;5;241m=\u001b[39mestimator,\n\u001b[0;32m    721\u001b[0m     X\u001b[38;5;241m=\u001b[39mX,\n\u001b[0;32m    722\u001b[0m     y\u001b[38;5;241m=\u001b[39my,\n\u001b[0;32m    723\u001b[0m     groups\u001b[38;5;241m=\u001b[39mgroups,\n\u001b[0;32m    724\u001b[0m     scoring\u001b[38;5;241m=\u001b[39m{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mscore\u001b[39m\u001b[38;5;124m\"\u001b[39m: scorer},\n\u001b[0;32m    725\u001b[0m     cv\u001b[38;5;241m=\u001b[39mcv,\n\u001b[0;32m    726\u001b[0m     n_jobs\u001b[38;5;241m=\u001b[39mn_jobs,\n\u001b[0;32m    727\u001b[0m     verbose\u001b[38;5;241m=\u001b[39mverbose,\n\u001b[0;32m    728\u001b[0m     fit_params\u001b[38;5;241m=\u001b[39mfit_params,\n\u001b[0;32m    729\u001b[0m     params\u001b[38;5;241m=\u001b[39mparams,\n\u001b[0;32m    730\u001b[0m     pre_dispatch\u001b[38;5;241m=\u001b[39mpre_dispatch,\n\u001b[0;32m    731\u001b[0m     error_score\u001b[38;5;241m=\u001b[39merror_score,\n\u001b[0;32m    732\u001b[0m )\n\u001b[0;32m    733\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m cv_results[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtest_score\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\utils\\_param_validation.py:213\u001b[0m, in \u001b[0;36mvalidate_params.<locals>.decorator.<locals>.wrapper\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    207\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m    208\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m config_context(\n\u001b[0;32m    209\u001b[0m         skip_parameter_validation\u001b[38;5;241m=\u001b[39m(\n\u001b[0;32m    210\u001b[0m             prefer_skip_nested_validation \u001b[38;5;129;01mor\u001b[39;00m global_skip_validation\n\u001b[0;32m    211\u001b[0m         )\n\u001b[0;32m    212\u001b[0m     ):\n\u001b[1;32m--> 213\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m func(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    214\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m InvalidParameterError \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m    215\u001b[0m     \u001b[38;5;66;03m# When the function is just a wrapper around an estimator, we allow\u001b[39;00m\n\u001b[0;32m    216\u001b[0m     \u001b[38;5;66;03m# the function to delegate validation to the estimator, but we replace\u001b[39;00m\n\u001b[0;32m    217\u001b[0m     \u001b[38;5;66;03m# the name of the estimator by the name of the function in the error\u001b[39;00m\n\u001b[0;32m    218\u001b[0m     \u001b[38;5;66;03m# message to avoid confusion.\u001b[39;00m\n\u001b[0;32m    219\u001b[0m     msg \u001b[38;5;241m=\u001b[39m re\u001b[38;5;241m.\u001b[39msub(\n\u001b[0;32m    220\u001b[0m         \u001b[38;5;124mr\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mparameter of \u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124mw+ must be\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    221\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mparameter of \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mfunc\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__qualname__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m must be\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    222\u001b[0m         \u001b[38;5;28mstr\u001b[39m(e),\n\u001b[0;32m    223\u001b[0m     )\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\model_selection\\_validation.py:430\u001b[0m, in \u001b[0;36mcross_validate\u001b[1;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, params, pre_dispatch, return_train_score, return_estimator, return_indices, error_score)\u001b[0m\n\u001b[0;32m    427\u001b[0m \u001b[38;5;66;03m# We clone the estimator to make sure that all the folds are\u001b[39;00m\n\u001b[0;32m    428\u001b[0m \u001b[38;5;66;03m# independent, and that it is pickle-able.\u001b[39;00m\n\u001b[0;32m    429\u001b[0m parallel \u001b[38;5;241m=\u001b[39m Parallel(n_jobs\u001b[38;5;241m=\u001b[39mn_jobs, verbose\u001b[38;5;241m=\u001b[39mverbose, pre_dispatch\u001b[38;5;241m=\u001b[39mpre_dispatch)\n\u001b[1;32m--> 430\u001b[0m results \u001b[38;5;241m=\u001b[39m parallel(\n\u001b[0;32m    431\u001b[0m     delayed(_fit_and_score)(\n\u001b[0;32m    432\u001b[0m         clone(estimator),\n\u001b[0;32m    433\u001b[0m         X,\n\u001b[0;32m    434\u001b[0m         y,\n\u001b[0;32m    435\u001b[0m         scorer\u001b[38;5;241m=\u001b[39mscorers,\n\u001b[0;32m    436\u001b[0m         train\u001b[38;5;241m=\u001b[39mtrain,\n\u001b[0;32m    437\u001b[0m         test\u001b[38;5;241m=\u001b[39mtest,\n\u001b[0;32m    438\u001b[0m         verbose\u001b[38;5;241m=\u001b[39mverbose,\n\u001b[0;32m    439\u001b[0m         parameters\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m    440\u001b[0m         fit_params\u001b[38;5;241m=\u001b[39mrouted_params\u001b[38;5;241m.\u001b[39mestimator\u001b[38;5;241m.\u001b[39mfit,\n\u001b[0;32m    441\u001b[0m         score_params\u001b[38;5;241m=\u001b[39mrouted_params\u001b[38;5;241m.\u001b[39mscorer\u001b[38;5;241m.\u001b[39mscore,\n\u001b[0;32m    442\u001b[0m         return_train_score\u001b[38;5;241m=\u001b[39mreturn_train_score,\n\u001b[0;32m    443\u001b[0m         return_times\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m,\n\u001b[0;32m    444\u001b[0m         return_estimator\u001b[38;5;241m=\u001b[39mreturn_estimator,\n\u001b[0;32m    445\u001b[0m         error_score\u001b[38;5;241m=\u001b[39merror_score,\n\u001b[0;32m    446\u001b[0m     )\n\u001b[0;32m    447\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m train, test \u001b[38;5;129;01min\u001b[39;00m indices\n\u001b[0;32m    448\u001b[0m )\n\u001b[0;32m    450\u001b[0m _warn_or_raise_about_fit_failures(results, error_score)\n\u001b[0;32m    452\u001b[0m \u001b[38;5;66;03m# For callable scoring, the return type is only know after calling. If the\u001b[39;00m\n\u001b[0;32m    453\u001b[0m \u001b[38;5;66;03m# return type is a dictionary, the error scores can now be inserted with\u001b[39;00m\n\u001b[0;32m    454\u001b[0m \u001b[38;5;66;03m# the correct key.\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\utils\\parallel.py:67\u001b[0m, in \u001b[0;36mParallel.__call__\u001b[1;34m(self, iterable)\u001b[0m\n\u001b[0;32m     62\u001b[0m config \u001b[38;5;241m=\u001b[39m get_config()\n\u001b[0;32m     63\u001b[0m iterable_with_config \u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m     64\u001b[0m     (_with_config(delayed_func, config), args, kwargs)\n\u001b[0;32m     65\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m delayed_func, args, kwargs \u001b[38;5;129;01min\u001b[39;00m iterable\n\u001b[0;32m     66\u001b[0m )\n\u001b[1;32m---> 67\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39m\u001b[38;5;21m__call__\u001b[39m(iterable_with_config)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\joblib\\parallel.py:1098\u001b[0m, in \u001b[0;36mParallel.__call__\u001b[1;34m(self, iterable)\u001b[0m\n\u001b[0;32m   1095\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_iterating \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m   1097\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backend\u001b[38;5;241m.\u001b[39mretrieval_context():\n\u001b[1;32m-> 1098\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mretrieve()\n\u001b[0;32m   1099\u001b[0m \u001b[38;5;66;03m# Make sure that we get a last message telling us we are done\u001b[39;00m\n\u001b[0;32m   1100\u001b[0m elapsed_time \u001b[38;5;241m=\u001b[39m time\u001b[38;5;241m.\u001b[39mtime() \u001b[38;5;241m-\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_start_time\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\joblib\\parallel.py:975\u001b[0m, in \u001b[0;36mParallel.retrieve\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    973\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m    974\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backend, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124msupports_timeout\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;28;01mFalse\u001b[39;00m):\n\u001b[1;32m--> 975\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_output\u001b[38;5;241m.\u001b[39mextend(job\u001b[38;5;241m.\u001b[39mget(timeout\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtimeout))\n\u001b[0;32m    976\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    977\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_output\u001b[38;5;241m.\u001b[39mextend(job\u001b[38;5;241m.\u001b[39mget())\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\joblib\\_parallel_backends.py:567\u001b[0m, in \u001b[0;36mLokyBackend.wrap_future_result\u001b[1;34m(future, timeout)\u001b[0m\n\u001b[0;32m    564\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Wrapper for Future.result to implement the same behaviour as\u001b[39;00m\n\u001b[0;32m    565\u001b[0m \u001b[38;5;124;03mAsyncResults.get from multiprocessing.\"\"\"\u001b[39;00m\n\u001b[0;32m    566\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 567\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m future\u001b[38;5;241m.\u001b[39mresult(timeout\u001b[38;5;241m=\u001b[39mtimeout)\n\u001b[0;32m    568\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m CfTimeoutError \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m    569\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTimeoutError\u001b[39;00m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01me\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\concurrent\\futures\\_base.py:451\u001b[0m, in \u001b[0;36mFuture.result\u001b[1;34m(self, timeout)\u001b[0m\n\u001b[0;32m    448\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_state \u001b[38;5;241m==\u001b[39m FINISHED:\n\u001b[0;32m    449\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m__get_result()\n\u001b[1;32m--> 451\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_condition\u001b[38;5;241m.\u001b[39mwait(timeout)\n\u001b[0;32m    453\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_state \u001b[38;5;129;01min\u001b[39;00m [CANCELLED, CANCELLED_AND_NOTIFIED]:\n\u001b[0;32m    454\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m CancelledError()\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\threading.py:320\u001b[0m, in \u001b[0;36mCondition.wait\u001b[1;34m(self, timeout)\u001b[0m\n\u001b[0;32m    318\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:    \u001b[38;5;66;03m# restore state no matter what (e.g., KeyboardInterrupt)\u001b[39;00m\n\u001b[0;32m    319\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m timeout \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m--> 320\u001b[0m         waiter\u001b[38;5;241m.\u001b[39macquire()\n\u001b[0;32m    321\u001b[0m         gotit \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[0;32m    322\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "-np.mean(cross_val_score(cat_symmetric, boost_train_less, y, cv = 5, scoring='neg_root_mean_squared_error', n_jobs=-1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "293e8783",
   "metadata": {},
   "outputs": [],
   "source": [
    "exgb = xgb.XGBRegressor(random_state = 1, colsample_bytree = 0.6900874555638847, gamma = 0, learning_rate = .1, \\\n",
    "                       max_leaves = 65, n_estimators = 5000, reg_lambda = 523.7949204746988, subsample = .3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "785192d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "-np.mean(cross_val_score(exgb, boost_train_less, y, cv = 5, scoring='neg_root_mean_squared_error', n_jobs=-1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "626cb110",
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_lossguide = CatBoostRegressor(random_state=1, verbose = False, grow_policy='Lossguide', \\\n",
    "                                       subsample = .975, reg_lambda=2, num_leaves = 60, n_estimators = 2625, \\\n",
    "                                       learning_rate = 0.035, colsample_bylevel = .275).fit(boost_train_less, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "b5af5672",
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_loss_pred = cat_lossguide.predict(boost_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "6b557fa2",
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_symmetric =CatBoostRegressor(random_state=1, verbose = False, grow_policy='SymmetricTree', \\\n",
    "                                       subsample = .925, reg_lambda=3, n_estimators = 2500, \\\n",
    "                                       learning_rate = 0.05, colsample_bylevel = .175).fit(boost_train_less, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "a72605ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_sym_pred = cat_symmetric.predict(boost_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "e7fb2e9a",
   "metadata": {},
   "outputs": [],
   "source": [
    "exgb = xgb.XGBRegressor(random_state = 1, colsample_bytree = 0.6900874555638847, gamma = 0, learning_rate = .1, \\\n",
    "                       max_leaves = 65, n_estimators = 5000, reg_lambda = 523.7949204746988, subsample = .3).fit(boost_train_less, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "aa179169",
   "metadata": {},
   "outputs": [],
   "source": [
    "exgb_pred = exgb.predict(boost_test_less)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "288cfa8a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "39.266858854096256"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "root_mean_squared_error(exgb_pred, cat_sym_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "96b492a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.08579081, 0.39539705, 0.54454016])"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stack_cat.final_estimator_.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "52289120",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-3.952282862739935"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stack_cat.final_estimator_.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "0302c3f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "stack_cat_pred = stack_cat.predict(boost_test_less)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "68f210ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "153.16345403639681"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stack_cat_pred.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "730eaefd",
   "metadata": {},
   "source": [
    "## 2) Hyperparameter tuning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f9b39b7",
   "metadata": {},
   "source": [
    "### How many attempts did it take you to tune the model hyperparameters?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4e33d51",
   "metadata": {},
   "source": [
    "So. Many. Times. I really struggled with making my model with this one, and am still working on it now honestly. I ended up tuning 2 catboost models and one xgboost(the catboost were different in one used symmetric trees, one used lossguide). For just these models, took maybe 5-7 attempts each as I narrowed them down a good amount and also changed predictors I tuned them on a couple times. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a6f50fd",
   "metadata": {},
   "source": [
    "### Which tuning method did you use (grid search / Bayes search / etc.)?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43ea3666",
   "metadata": {},
   "source": [
    "I used RandomSearch and BayesSearch."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a0da667",
   "metadata": {},
   "source": [
    "### What challenges did you face while tuning the hyperparameters, and what actions did you take to address those challenges?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbe8149e",
   "metadata": {},
   "source": [
    "Using Quest was huge for me, allowing me to tune faster and also do either other coding or just other work in the background. Aside from that the main challenges I faced was just that I felt my models were not doing nearly well enough. I think it has to do with the predictors I was using but I am unsure. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f26daac",
   "metadata": {},
   "source": [
    "### How many hours did you spend on hyperparameter tuning?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5546eb3e",
   "metadata": {},
   "source": [
    "Uncountable."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ba4abb9",
   "metadata": {},
   "source": [
    "**Paste the hyperparameter tuning code below. You must show at least one hyperparameter tuning procedure.**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53011b16",
   "metadata": {},
   "source": [
    "The optimal are below in my model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e104de7",
   "metadata": {},
   "source": [
    "## 3) Model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50a37864",
   "metadata": {},
   "source": [
    "Using the optimal model hyperparameters, train the model, and paste the code below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0fa0764f",
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_lossguide = CatBoostRegressor(random_state=1, verbose = False, grow_policy='Lossguide', \\\n",
    "                                       subsample = .975, reg_lambda=2, num_leaves = 60, n_estimators = 2625, \\\n",
    "                                       learning_rate = 0.035, colsample_bylevel = .275)\n",
    "cat_symmetric =CatBoostRegressor(random_state=1, verbose = False, grow_policy='SymmetricTree', \\\n",
    "                                       subsample = .925, reg_lambda=3, n_estimators = 2500, \\\n",
    "                                       learning_rate = 0.05, colsample_bylevel = .175)\n",
    "exgb = xgb.XGBRegressor(random_state = 1, colsample_bytree = 0.6900874555638847, gamma = 0, learning_rate = .1, \\\n",
    "                       max_leaves = 65, n_estimators = 5000, reg_lambda = 523.7949204746988, subsample = .3)\n",
    "cv = KFold(n_splits=5, random_state=1, shuffle=True)\n",
    "\n",
    "stack_cat = StackingRegressor([('lossguide', cat_lossguide), ('symmetric', cat_symmetric), ('exgb', exgb)],\\\n",
    "                              final_estimator= LinearRegression(), \\\n",
    "                             cv=cv, n_jobs=-1)\n",
    "stack_cat.fit(boost_train_less, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6da90139",
   "metadata": {},
   "outputs": [],
   "source": [
    "stack_cat.final_estimator_.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "38e296e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "stack_cat_pred = stack_cat.predict(boost_test_less)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "488158e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "stack_cat_pred.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "897d6954",
   "metadata": {},
   "source": [
    "## 4) Put any ad-hoc steps for further improving model accuracy\n",
    "For example, scaling up or scaling down the predictions, capping predictions, etc.\n",
    "\n",
    "Put code below."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99e76d61",
   "metadata": {},
   "source": [
    "##### My ad hoc steps are a whole nother model so I'll put it all here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "d07599c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "poly = PolynomialFeatures(2, include_bias = False)\n",
    "# these are the total variables to be dropped\n",
    "# This is the improved\n",
    "X_train_log = training.drop(columns = ['id', 'host_id', 'host_since', 'host_location', 'host_response_time', 'host_is_superhost', \\\n",
    "                                  'host_neighbourhood', 'host_listings_count', 'host_total_listings_count', 'host_verifications', \\\n",
    "                                   'host_has_profile_pic', 'host_identity_verified', 'neighbourhood_cleansed', 'property_type', \\\n",
    "                                   'room_type', 'bathrooms_text', 'price', 'minimum_minimum_nights', 'maximum_minimum_nights', \\\n",
    "                                   'minimum_maximum_nights', 'maximum_maximum_nights', 'has_availability', 'first_review', \\\n",
    "                                   'last_review', 'instant_bookable', 'calculated_host_listings_count_entire_homes', \\\n",
    "                                   'calculated_host_listings_count_private_rooms', \\\n",
    "                                   'calculated_host_listings_count_shared_rooms', 'log_price', 'host_total_listings_over_2000', \\\n",
    "                                   'property_room_cleansed', 'neighbourhoods', 'superhost_t', 'profile_t', 'identity_f', \\\n",
    "                                      'bookable_f', 'listings_under 2000', 'Armour Square', \\\n",
    "                                      'a few days or more', 'within a day', 'Avondale', 'Bridgeport', 'Douglas', 'East Garfield Park', 'Edgewater',\n",
    "       'Grand Boulevard', 'Humboldt Park', 'Hyde Park', 'Irving Park',\n",
    "       'Lake View', 'Lincoln Park', 'Lincoln Square', 'Logan Square', 'Loop',\n",
    "       'Lower West Side', 'Near North Side', 'Near South Side', 'neighborhood_price_bins', \\\n",
    "       'Near West Side', 'North Center', 'Portage Park', 'Rogers Park',\n",
    "       'South Shore', 'Uptown', 'West Ridge', 'West Town', 'Woodlawn', 'within a few hours', 'within an hour', \\\n",
    "                                      \"verifications_['email', 'phone', 'work_email']\",\n",
    "       \"verifications_['email', 'phone']\", \"verifications_['email']\",\n",
    "       \"verifications_['phone', 'work_email']\", \"verifications_['phone']\"]) \n",
    "    \n",
    "X_test_log = test_imputed.drop(columns = ['id', 'host_id', 'host_since', 'host_location', 'host_response_time', 'host_is_superhost', \\\n",
    "                                  'host_neighbourhood', 'host_listings_count', 'host_total_listings_count', 'host_verifications', \\\n",
    "                                   'host_has_profile_pic', 'host_identity_verified', 'neighbourhood_cleansed', 'property_type', \\\n",
    "                                   'room_type', 'bathrooms_text', 'price', 'minimum_minimum_nights', 'maximum_minimum_nights', \\\n",
    "                                   'minimum_maximum_nights', 'maximum_maximum_nights', 'has_availability', 'first_review', \\\n",
    "                                   'last_review', 'instant_bookable', 'calculated_host_listings_count_entire_homes', \\\n",
    "                                   'calculated_host_listings_count_private_rooms', \\\n",
    "                                   'calculated_host_listings_count_shared_rooms', 'log_price', 'host_total_listings_over_2000', \\\n",
    "                                   'property_room_cleansed', 'neighbourhoods', 'superhost_t', 'profile_t', 'identity_f', \\\n",
    "                                      'bookable_f', 'listings_under 2000', 'Armour Square', \\\n",
    "                                      'a few days or more', 'within a day', 'Avondale', 'Bridgeport', 'Douglas', 'East Garfield Park', 'Edgewater',\n",
    "       'Grand Boulevard', 'Humboldt Park', 'Hyde Park', 'Irving Park',\n",
    "       'Lake View', 'Lincoln Park', 'Lincoln Square', 'Logan Square', 'Loop',\n",
    "       'Lower West Side', 'Near North Side', 'Near South Side', 'neighborhood_price_bins',\n",
    "       'Near West Side', 'North Center', 'Portage Park', 'Rogers Park',\n",
    "       'South Shore', 'Uptown', 'West Ridge', 'West Town', 'Woodlawn', 'within a few hours', 'within an hour', \\\n",
    "                                         \"verifications_['email', 'phone', 'work_email']\",\n",
    "       \"verifications_['email', 'phone']\", \"verifications_['email']\",\n",
    "       \"verifications_['phone', 'work_email']\", \"verifications_['phone']\"]) \n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "bac57962",
   "metadata": {},
   "outputs": [],
   "source": [
    "# here we will make data set of the variables we want to be interacted by dropping the ones we don't\n",
    "train_to_be_poly = X_train_log.drop(columns=['latitude', 'longitude', 'bookable_t', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', \\\n",
    "                                         'host_days_since', 'days_since_first', 'days_since_last', \\\n",
    "                                        'identity_t', 'availability_30',\n",
    "       'availability_60', 'availability_90', 'availability_365', 'host_response_rate', 'low_price_hood', 'below_average_price_hood', 'average_price_hood',\n",
    "       'above_average_price_hood', 'high_price_hood'])\n",
    "test_to_be_poly = X_test_log.drop(columns=['latitude', 'longitude', 'bookable_t', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', \\\n",
    "                                         'host_days_since', 'days_since_first', 'days_since_last', \\\n",
    "                                        'identity_t', 'availability_30',\n",
    "       'availability_60', 'availability_90', 'availability_365', 'host_response_rate', 'low_price_hood', 'below_average_price_hood', 'average_price_hood',\n",
    "       'above_average_price_hood', 'high_price_hood'])\n",
    "\n",
    "train_no_poly = X_train_log.loc[:, ['latitude', 'longitude', 'bookable_t', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', \\\n",
    "                                         'host_days_since', 'days_since_first', 'days_since_last', \\\n",
    "                                        'identity_t','availability_30',\n",
    "       'availability_60', 'availability_90', 'availability_365', 'host_response_rate', 'low_price_hood', 'below_average_price_hood', 'average_price_hood',\n",
    "       'above_average_price_hood', 'high_price_hood']]\n",
    "test_no_poly = X_test_log.loc[:, ['latitude', 'longitude', 'bookable_t', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', \\\n",
    "                                        'host_days_since', 'days_since_first', 'days_since_last', \\\n",
    "                                        'identity_t', 'availability_30',\n",
    "       'availability_60', 'availability_90', 'availability_365', 'host_response_rate','low_price_hood', 'below_average_price_hood', 'average_price_hood',\n",
    "       'above_average_price_hood', 'high_price_hood']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "66fd65ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now going to create some data sets that I will polynomial feature three times\n",
    "\n",
    "train_poly_3 = train_to_be_poly.loc[:, ['accommodates', 'beds', 'baths']]\n",
    "test_poly_3 = test_to_be_poly.loc[:, ['accommodates', 'beds', 'baths', ]]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "30e0e6b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# transforming the data\n",
    "# first regular poly\n",
    "poly = PolynomialFeatures(2, include_bias=False)\n",
    "X_train_poly_reg = poly.fit_transform(train_to_be_poly)\n",
    "X_test_poly_reg = poly.fit_transform(test_to_be_poly)\n",
    "\n",
    "# three factor poly\n",
    "poly3 = PolynomialFeatures(3, include_bias=False, interaction_only=True)\n",
    "\n",
    "X_train_poly_3 = poly3.fit_transform(train_poly_3)\n",
    "X_test_poly_3 = poly3.fit_transform(test_poly_3)\n",
    "\n",
    "# making dataset for regular poly\n",
    "names = poly.get_feature_names_out(input_features=poly.feature_names_in_)\n",
    "Xtrain_reg= pd.DataFrame(X_train_poly_reg, columns=names)\n",
    "Xtest_reg = pd.DataFrame(X_test_poly_reg, columns=names)\n",
    "\n",
    "#making dataset for cubed poly\n",
    "names3 = poly3.get_feature_names_out(input_features=poly3.feature_names_in_)\n",
    "Xtrain_3 = pd.DataFrame(X_train_poly_3, columns=names3).iloc[:, -1:]\n",
    "Xtest_3 = pd.DataFrame(X_test_poly_3, columns=names3).iloc[:, -1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "c5231488",
   "metadata": {},
   "outputs": [],
   "source": [
    "# concat those datasets\n",
    "X_trained = pd.concat([train_no_poly, Xtrain_reg, Xtrain_3], axis =1)\n",
    "X_tested = pd.concat([test_no_poly, Xtest_reg, Xtest_3], axis= 1)\n",
    "X_tested = pd.DataFrame(X_tested, columns=X_trained.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "b12ddcde",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>bookable_t</th>\n",
       "      <th>minimum_nights_avg_ntm</th>\n",
       "      <th>maximum_nights_avg_ntm</th>\n",
       "      <th>host_days_since</th>\n",
       "      <th>days_since_first</th>\n",
       "      <th>days_since_last</th>\n",
       "      <th>identity_t</th>\n",
       "      <th>availability_30</th>\n",
       "      <th>...</th>\n",
       "      <th>calculated_host_listings_count_log host_days_since_log</th>\n",
       "      <th>calculated_host_listings_count_log days_since_first_log</th>\n",
       "      <th>calculated_host_listings_count_log days_since_last_log</th>\n",
       "      <th>host_days_since_log^2</th>\n",
       "      <th>host_days_since_log days_since_first_log</th>\n",
       "      <th>host_days_since_log days_since_last_log</th>\n",
       "      <th>days_since_first_log^2</th>\n",
       "      <th>days_since_first_log days_since_last_log</th>\n",
       "      <th>days_since_last_log^2</th>\n",
       "      <th>accommodates beds baths</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-1.554284</td>\n",
       "      <td>0.005301</td>\n",
       "      <td>-0.669033</td>\n",
       "      <td>-0.070760</td>\n",
       "      <td>0.764500</td>\n",
       "      <td>-0.170402</td>\n",
       "      <td>0.925046</td>\n",
       "      <td>1.289502</td>\n",
       "      <td>0.32972</td>\n",
       "      <td>1.154390</td>\n",
       "      <td>...</td>\n",
       "      <td>0.211386</td>\n",
       "      <td>0.422287</td>\n",
       "      <td>0.412044</td>\n",
       "      <td>0.098154</td>\n",
       "      <td>0.854714</td>\n",
       "      <td>1.440226</td>\n",
       "      <td>1.153442</td>\n",
       "      <td>1.954898</td>\n",
       "      <td>2.025919</td>\n",
       "      <td>-0.305161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.015673</td>\n",
       "      <td>0.924270</td>\n",
       "      <td>1.494694</td>\n",
       "      <td>-0.070760</td>\n",
       "      <td>-0.997418</td>\n",
       "      <td>0.837892</td>\n",
       "      <td>-0.716609</td>\n",
       "      <td>-0.329558</td>\n",
       "      <td>0.32972</td>\n",
       "      <td>0.742857</td>\n",
       "      <td>...</td>\n",
       "      <td>1.323698</td>\n",
       "      <td>1.069011</td>\n",
       "      <td>1.092293</td>\n",
       "      <td>0.779264</td>\n",
       "      <td>-0.245533</td>\n",
       "      <td>0.171759</td>\n",
       "      <td>-0.822193</td>\n",
       "      <td>-0.785833</td>\n",
       "      <td>-0.443350</td>\n",
       "      <td>0.702966</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.898762</td>\n",
       "      <td>0.210279</td>\n",
       "      <td>-0.669033</td>\n",
       "      <td>-0.397791</td>\n",
       "      <td>-1.739278</td>\n",
       "      <td>-0.756269</td>\n",
       "      <td>-0.769858</td>\n",
       "      <td>-0.353620</td>\n",
       "      <td>0.32972</td>\n",
       "      <td>-1.314812</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.958707</td>\n",
       "      <td>-1.003301</td>\n",
       "      <td>-0.964031</td>\n",
       "      <td>-0.463779</td>\n",
       "      <td>-0.887905</td>\n",
       "      <td>-0.602533</td>\n",
       "      <td>-0.969782</td>\n",
       "      <td>-0.930639</td>\n",
       "      <td>-0.509439</td>\n",
       "      <td>-0.144991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-1.446071</td>\n",
       "      <td>1.456436</td>\n",
       "      <td>1.494694</td>\n",
       "      <td>-0.397791</td>\n",
       "      <td>-1.426305</td>\n",
       "      <td>0.583933</td>\n",
       "      <td>-0.818575</td>\n",
       "      <td>-0.363933</td>\n",
       "      <td>0.32972</td>\n",
       "      <td>0.578243</td>\n",
       "      <td>...</td>\n",
       "      <td>1.268435</td>\n",
       "      <td>0.944115</td>\n",
       "      <td>1.044618</td>\n",
       "      <td>0.630134</td>\n",
       "      <td>-0.560756</td>\n",
       "      <td>0.013534</td>\n",
       "      <td>-1.121501</td>\n",
       "      <td>-1.061588</td>\n",
       "      <td>-0.538387</td>\n",
       "      <td>-0.295739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.573669</td>\n",
       "      <td>0.847013</td>\n",
       "      <td>1.494694</td>\n",
       "      <td>-0.397791</td>\n",
       "      <td>0.764500</td>\n",
       "      <td>-1.084824</td>\n",
       "      <td>-0.270224</td>\n",
       "      <td>-0.363933</td>\n",
       "      <td>0.32972</td>\n",
       "      <td>-1.314812</td>\n",
       "      <td>...</td>\n",
       "      <td>1.136087</td>\n",
       "      <td>1.465270</td>\n",
       "      <td>1.193352</td>\n",
       "      <td>-0.884610</td>\n",
       "      <td>-0.390696</td>\n",
       "      <td>-0.885456</td>\n",
       "      <td>0.020816</td>\n",
       "      <td>-0.247946</td>\n",
       "      <td>-0.538387</td>\n",
       "      <td>0.024600</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 1672 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   latitude  longitude  bookable_t  minimum_nights_avg_ntm  \\\n",
       "0 -1.554284   0.005301   -0.669033               -0.070760   \n",
       "1  0.015673   0.924270    1.494694               -0.070760   \n",
       "2  0.898762   0.210279   -0.669033               -0.397791   \n",
       "3 -1.446071   1.456436    1.494694               -0.397791   \n",
       "4 -0.573669   0.847013    1.494694               -0.397791   \n",
       "\n",
       "   maximum_nights_avg_ntm  host_days_since  days_since_first  days_since_last  \\\n",
       "0                0.764500        -0.170402          0.925046         1.289502   \n",
       "1               -0.997418         0.837892         -0.716609        -0.329558   \n",
       "2               -1.739278        -0.756269         -0.769858        -0.353620   \n",
       "3               -1.426305         0.583933         -0.818575        -0.363933   \n",
       "4                0.764500        -1.084824         -0.270224        -0.363933   \n",
       "\n",
       "   identity_t  availability_30  ...  \\\n",
       "0     0.32972         1.154390  ...   \n",
       "1     0.32972         0.742857  ...   \n",
       "2     0.32972        -1.314812  ...   \n",
       "3     0.32972         0.578243  ...   \n",
       "4     0.32972        -1.314812  ...   \n",
       "\n",
       "   calculated_host_listings_count_log host_days_since_log  \\\n",
       "0                                           0.211386        \n",
       "1                                           1.323698        \n",
       "2                                          -0.958707        \n",
       "3                                           1.268435        \n",
       "4                                           1.136087        \n",
       "\n",
       "   calculated_host_listings_count_log days_since_first_log  \\\n",
       "0                                           0.422287         \n",
       "1                                           1.069011         \n",
       "2                                          -1.003301         \n",
       "3                                           0.944115         \n",
       "4                                           1.465270         \n",
       "\n",
       "   calculated_host_listings_count_log days_since_last_log  \\\n",
       "0                                           0.412044        \n",
       "1                                           1.092293        \n",
       "2                                          -0.964031        \n",
       "3                                           1.044618        \n",
       "4                                           1.193352        \n",
       "\n",
       "   host_days_since_log^2  host_days_since_log days_since_first_log  \\\n",
       "0               0.098154                                  0.854714   \n",
       "1               0.779264                                 -0.245533   \n",
       "2              -0.463779                                 -0.887905   \n",
       "3               0.630134                                 -0.560756   \n",
       "4              -0.884610                                 -0.390696   \n",
       "\n",
       "   host_days_since_log days_since_last_log  days_since_first_log^2  \\\n",
       "0                                 1.440226                1.153442   \n",
       "1                                 0.171759               -0.822193   \n",
       "2                                -0.602533               -0.969782   \n",
       "3                                 0.013534               -1.121501   \n",
       "4                                -0.885456                0.020816   \n",
       "\n",
       "   days_since_first_log days_since_last_log  days_since_last_log^2  \\\n",
       "0                                  1.954898               2.025919   \n",
       "1                                 -0.785833              -0.443350   \n",
       "2                                 -0.930639              -0.509439   \n",
       "3                                 -1.061588              -0.538387   \n",
       "4                                 -0.247946              -0.538387   \n",
       "\n",
       "   accommodates beds baths  \n",
       "0                -0.305161  \n",
       "1                 0.702966  \n",
       "2                -0.144991  \n",
       "3                -0.295739  \n",
       "4                 0.024600  \n",
       "\n",
       "[5 rows x 1672 columns]"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#scaling the data\n",
    "scaler = StandardScaler()\n",
    "scaler.fit(X_trained)\n",
    "# fitting the data\n",
    "X_std = scaler.transform(X_trained)\n",
    "X_std_test = scaler.transform(X_tested)\n",
    "\n",
    "names = X_trained.columns\n",
    "# Convertin Xstd to dataframes\n",
    "train_Xstd = pd.DataFrame(X_std, columns=names)\n",
    "test_Xstd = pd.DataFrame(X_std_test, columns=names)\n",
    "# dropping every column whose values are only 0, should make code run much faster as well\n",
    "#train_std = train_Xstd.drop(train_Xstd.columns[(train_Xstd == 0).all()], axis=1)\n",
    "#test_std = test_Xstd.drop(test_Xstd.columns[(test_Xstd == 0).all()], axis=1)\n",
    "train_Xstd.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "1981728f",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = training['log_price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "b33f6445",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4987, 149)"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "training.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ceeccd01",
   "metadata": {},
   "source": [
    "alphas = np.logspace(0,-4,200)\n",
    "lassocv = LassoCV(alphas = alphas,max_iter = 200000, n_jobs=-1, cv = 10)\n",
    "lassocv.fit(train_Xstd, y)\n",
    "\n",
    "#Optimal value of the tuning parameter - lambda\n",
    "lassocv.alpha_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "a622df74",
   "metadata": {},
   "outputs": [],
   "source": [
    "lasso_model = Lasso(alpha=0.001011637979766207, max_iter = 200000).fit(train_Xstd, y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 346,
   "id": "852b0eaa",
   "metadata": {},
   "outputs": [],
   "source": [
    "lasso_predictions1 = np.exp(lasso_model.predict(test_Xstd))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "9fb1706a",
   "metadata": {},
   "outputs": [],
   "source": [
    "coef_0 = [   0,    1,    3,    4,    6,    8,    9,   11,   12,   14,   15,\n",
    "          16,   18,   23,   31,   33,   77,   78,   79,   94,  101,  103,\n",
    "         104,  107,  108,  113,  116,  127,  131,  134,  135,  136,  147,\n",
    "         148,  149,  151,  154,  157,  162,  164,  166,  167,  168,  169,\n",
    "         171,  173,  175,  178,  179,  182,  184,  185,  186,  202,  203,\n",
    "         207,  208,  209,  210,  211,  212,  213,  214,  216,  217,  218,\n",
    "         219,  220,  222,  225,  232,  233,  235,  242,  244,  254,  259,\n",
    "         261,  263,  264,  265,  268,  269,  271,  273,  289,  306,  307,\n",
    "         310,  311,  312,  315,  318,  319,  320,  322,  324,  325,  327,\n",
    "         328,  334,  338,  341,  343,  347,  355,  357,  358,  363,  365,\n",
    "         366,  367,  371,  372,  378,  379,  380,  388,  390,  391,  392,\n",
    "         405,  407,  408,  409,  411,  413,  418,  419,  421,  424,  425,\n",
    "         426,  428,  430,  438,  454,  460,  464,  466,  467,  471,  472,\n",
    "         487,  488,  491,  544,  590,  591,  627,  638,  724,  725,  777,\n",
    "         814,  822,  823,  825,  827,  828,  829,  830,  831,  832,  856,\n",
    "         858,  863,  865,  867,  873,  874,  884,  894,  898,  899,  900,\n",
    "         901,  905,  907,  910,  912,  913,  914,  917,  925,  927,  933,\n",
    "         934,  935,  936,  938,  939,  940,  942,  943,  944,  945,  946,\n",
    "         948,  949,  950,  960,  962,  964,  966,  969,  970,  971,  975,\n",
    "         978,  980,  982,  986,  987,  991,  995,  997, 1002, 1007, 1011,\n",
    "        1033, 1036, 1038, 1045, 1057, 1069, 1070, 1072, 1076, 1077, 1079,\n",
    "        1080, 1081, 1084, 1086, 1090, 1091, 1092, 1097, 1100, 1103, 1104,\n",
    "        1106, 1110, 1111, 1116, 1118, 1121, 1122, 1124, 1125, 1126, 1127,\n",
    "        1135, 1139, 1143, 1144, 1149, 1152, 1155, 1156, 1158, 1162, 1164,\n",
    "        1165, 1168, 1173, 1178, 1180, 1185, 1187, 1188, 1197, 1207, 1208,\n",
    "        1211, 1214, 1215, 1216, 1217, 1218, 1220, 1228, 1232, 1247, 1250,\n",
    "        1254, 1257, 1264, 1275, 1279, 1282, 1283, 1289, 1302, 1311, 1313,\n",
    "        1315, 1316, 1334, 1342, 1353, 1358, 1360, 1366, 1377, 1382, 1384,\n",
    "        1386, 1387, 1391, 1400, 1407, 1409, 1411, 1414, 1417, 1422, 1427,\n",
    "        1429, 1432, 1443, 1454, 1468, 1473, 1475, 1476, 1478, 1482, 1490,\n",
    "        1493, 1494, 1505, 1507, 1510, 1513, 1514, 1525, 1534, 1558, 1562,\n",
    "        1568, 1569, 1580, 1582, 1599, 1602, 1605, 1606, 1616, 1622, 1629,\n",
    "        1630, 1634, 1635, 1640, 1646, 1651, 1658, 1671]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 358,
   "id": "90ddfeaa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 2.82273748e-02,  4.71289810e-02, -3.91497438e-05, -3.28146525e-02,\n",
       "        1.33960568e-03, -1.97044839e-02,  1.97369159e-02, -2.54477455e-02,\n",
       "        1.11918050e-02,  3.49396787e-03,  7.30099918e-02, -2.00569506e-02,\n",
       "        3.50947032e-02,  3.45508772e-02, -4.63624872e-03, -1.72094884e-02,\n",
       "        6.05148972e-03, -7.67675033e-02, -9.51096989e-03, -4.13798928e-02,\n",
       "        6.63700423e-02,  1.89974021e-02,  2.62021901e-02, -3.37566541e-03,\n",
       "        1.65588807e-02,  1.54980780e-02, -8.94280295e-03, -1.11687537e-01,\n",
       "       -7.06655013e-04, -1.95745219e-02, -6.86405449e-03,  1.84993152e-02,\n",
       "       -3.12465946e-03,  1.24312301e-02,  9.16400971e-03,  3.35295466e-02,\n",
       "       -2.00967728e-02, -2.28380217e-02, -3.95382409e-03,  4.42552902e-03,\n",
       "       -4.46481294e-03,  8.81358109e-03,  9.45894768e-03,  5.24798879e-02,\n",
       "        2.85456079e-02,  1.68427144e-02,  1.17938298e-02,  2.94105325e-02,\n",
       "        1.67688094e-02,  3.43456262e-02,  1.05252006e-01,  8.10069564e-02,\n",
       "       -1.91791291e-02, -2.03024783e-03, -2.92944657e-03,  1.27771234e-02,\n",
       "        8.57341498e-03,  8.92997791e-04, -2.07525292e-02, -1.97993287e-02,\n",
       "        2.04780665e-03,  1.09376125e-03, -4.35470269e-03, -2.26619778e-02,\n",
       "        2.17505827e-02, -2.99445812e-02, -7.84787197e-03, -2.01639144e-03,\n",
       "       -1.20968200e-02, -1.10715486e-02, -6.69038593e-02,  1.04820825e-02,\n",
       "        2.64859452e-02,  7.82072749e-03,  9.35966741e-03, -4.24356935e-02,\n",
       "        7.62161160e-02, -7.63451555e-03, -4.14823976e-02, -6.31779938e-03,\n",
       "        1.47779035e-02, -1.03167555e-03, -1.37076420e-02,  8.98837318e-03,\n",
       "        1.07752108e-02,  1.58488677e-02, -2.84007402e-02,  2.77775896e-02,\n",
       "        4.89823516e-03,  9.16885282e-03,  5.93720494e-03,  4.55245586e-03,\n",
       "        1.25945161e-03,  1.17824685e-02, -3.75186355e-02,  1.49390388e-02,\n",
       "        3.70448323e-02,  2.59976720e-02,  1.74920114e-03,  3.81156664e-02,\n",
       "        5.58646994e-02, -2.19723083e-02,  8.12896261e-03, -1.58485318e-02,\n",
       "        2.35787662e-02, -4.88167124e-03, -4.71797707e-03, -2.13293036e-03,\n",
       "       -1.30153016e-02, -2.84644980e-03,  3.35594336e-02, -3.05853321e-03,\n",
       "        6.70257597e-03,  1.44962173e-03, -1.90635503e-03, -2.55148207e-02,\n",
       "       -1.70076596e-02,  2.67146967e-02,  2.52287054e-02,  1.63907656e-03,\n",
       "        3.77286655e-02, -2.45154868e-02, -3.89879247e-02,  2.90626352e-02,\n",
       "        2.39326788e-03, -2.50952902e-02,  1.59977552e-02, -6.78847977e-03,\n",
       "       -9.47937035e-03, -6.92723771e-03,  3.04558009e-03, -2.29508054e-02,\n",
       "       -1.33164216e-02,  1.21730833e-02,  3.64163375e-03, -2.37752776e-02,\n",
       "        4.87830705e-02,  2.80451883e-03,  1.37809881e-03, -4.88431135e-03,\n",
       "        6.06967393e-03,  8.52602697e-03, -6.94520915e-03, -3.43136682e-03,\n",
       "       -2.12870850e-03,  4.56012545e-03, -4.27029464e-03, -2.12865244e-02,\n",
       "        4.04833818e-03,  3.75655285e-02, -1.10140897e-02, -4.69845267e-03,\n",
       "       -8.60888849e-04, -7.89268897e-03, -7.42488322e-04, -4.72804024e-03,\n",
       "       -1.64793126e-02,  1.38052746e-02, -9.39504378e-03,  4.56892012e-03,\n",
       "       -4.43358837e-02,  2.73145987e-02,  5.24544358e-02, -7.31062324e-03,\n",
       "       -1.25218481e-02,  3.37378791e-02, -6.29268198e-03,  6.68984325e-03,\n",
       "        4.34212466e-03,  8.10565050e-02, -3.09678997e-03, -2.70435199e-02,\n",
       "        1.45619763e-03, -1.33400519e-02,  5.88136240e-03,  7.29088184e-03,\n",
       "       -1.29221482e-02, -5.61886362e-03,  5.51909971e-03,  3.69613365e-02,\n",
       "        2.55331149e-02,  7.08627815e-03, -6.87520780e-03,  6.04366490e-02,\n",
       "        1.19103969e-02,  1.45337366e-04, -4.18376745e-05, -5.45188064e-02,\n",
       "       -2.04974734e-02,  2.32749641e-02,  2.24724068e-02, -1.09270582e-02,\n",
       "       -1.10214535e-03, -3.68545236e-02, -7.75536942e-03, -4.17651645e-03,\n",
       "        5.20366320e-02,  1.51480760e-01,  7.85147185e-03, -1.52370350e-02,\n",
       "        2.75647357e-03, -1.04945853e-02, -4.85910765e-03, -9.52505538e-04,\n",
       "        3.65792984e-04,  3.96180828e-03,  2.42862518e-02,  1.64219414e-03,\n",
       "        1.27052781e-02,  9.25402268e-03, -1.93598991e-02, -8.10901635e-03,\n",
       "        1.18036461e-03, -4.06117020e-03, -4.41341125e-03, -1.81785882e-02,\n",
       "        2.09793590e-03, -1.89922037e-02, -4.57022078e-02,  1.59925005e-02,\n",
       "       -6.18783330e-03, -1.02096897e-02,  3.22163746e-03,  1.02972806e-02,\n",
       "        1.25463605e-02, -1.15014115e-02, -4.36776388e-04,  3.72845797e-03,\n",
       "       -7.82697798e-03,  3.01537420e-03,  1.05043417e-02, -3.31650362e-03,\n",
       "       -7.66113446e-03, -7.27804796e-03, -1.77109614e-02, -2.75660880e-03,\n",
       "       -1.30327073e-02,  1.19040252e-02, -2.89431810e-03,  3.48101554e-03,\n",
       "       -6.77710058e-03, -7.57942624e-03, -1.49805813e-02, -1.02613173e-03,\n",
       "       -5.03561717e-03,  6.37664742e-04,  1.78144342e-03, -2.69643929e-03,\n",
       "        2.62749100e-04, -8.15815488e-04,  6.57251333e-04,  1.01165295e-02,\n",
       "       -6.05259698e-03, -1.47824368e-03, -3.53318255e-03, -2.24353949e-02,\n",
       "       -1.02311417e-02, -3.80452851e-03,  3.62560458e-03,  5.62909351e-03,\n",
       "       -8.31893651e-03,  5.74913710e-03, -9.16211068e-04, -1.57505246e-02,\n",
       "        2.52352980e-02, -1.67629469e-02, -4.77233810e-03, -2.41456830e-03,\n",
       "       -5.27878775e-04, -3.38765497e-03, -1.08876773e-02,  3.72977909e-04,\n",
       "       -4.78435398e-03,  4.67419867e-03,  3.37948149e-03, -4.98992280e-03,\n",
       "       -4.07159468e-02, -4.43660547e-03, -2.01144216e-02, -2.02617271e-02,\n",
       "        5.78308943e-03, -1.68793748e-03,  3.40731409e-02,  9.19338701e-03,\n",
       "        3.14032984e-02,  2.62148144e-03,  5.36731361e-02,  7.31013656e-05,\n",
       "        5.59857131e-03, -5.84689172e-02, -1.17579447e-02, -1.10555219e-02,\n",
       "       -1.00483079e-02,  2.68991144e-03, -7.02845886e-03,  2.95066778e-03,\n",
       "        1.85896347e-02, -9.67457705e-03,  9.62004287e-03,  1.53554190e-02,\n",
       "       -1.93076480e-02, -3.61634679e-03, -1.36705360e-02, -2.48326216e-02,\n",
       "        2.93560904e-02,  1.17158480e-03, -1.17267348e-02,  9.49325318e-03,\n",
       "        8.42353614e-15,  2.40589799e-02, -1.90218121e-03,  1.50557165e-03,\n",
       "        1.15929729e-02,  1.04952158e-02, -1.08917635e-02,  2.15874972e-02,\n",
       "       -1.22164993e-02, -2.21549558e-02, -5.18772902e-03,  1.00972465e-04,\n",
       "        5.48744430e-03,  3.53676657e-03, -1.26645468e-02, -1.83864483e-02,\n",
       "        1.69560633e-02, -2.88518790e-03, -1.07220473e-02,  2.20491785e-03,\n",
       "       -1.71476771e-02, -4.81521712e-04, -2.92754846e-02, -1.10436355e-02,\n",
       "       -1.06370165e-02, -4.84006813e-02, -2.59857014e-03, -2.20040748e-03,\n",
       "        1.36920429e-03,  9.91998327e-05, -6.80395457e-03,  6.26434026e-03,\n",
       "        5.05054320e-03,  5.43316327e-03, -1.07542218e-02, -2.83743619e-02,\n",
       "        2.19614586e-03,  1.18688664e-02, -1.53883398e-04,  5.68503688e-03,\n",
       "        1.06751347e-02,  1.79961167e-04,  8.84018839e-03, -7.75034169e-03,\n",
       "        2.97928566e-02, -2.51209759e-02, -9.37230080e-03, -4.16631479e-02,\n",
       "        1.04169213e-03,  4.42330297e-02,  1.54339505e-02, -2.38692189e-02,\n",
       "       -2.18824742e-02,  5.54448051e-03,  9.83334929e-03, -2.01242332e-02,\n",
       "       -3.04650213e-03,  3.64621704e-03, -1.79303870e-02, -3.74503997e-02,\n",
       "        2.09796153e-02,  5.28618629e-02,  1.41756090e-01, -3.72298854e-02,\n",
       "       -7.07889380e-02, -4.52875081e-02,  3.77181758e-02, -4.03234780e-03,\n",
       "       -1.55402269e-03, -1.59232732e-02,  1.22807028e-02,  2.01979906e-03,\n",
       "       -3.70488732e-02, -8.58006857e-02,  6.50575918e-02,  1.73805782e-02,\n",
       "       -3.96433873e-02,  1.88050881e-02, -2.26367178e-04,  3.75136345e-03,\n",
       "        1.64841709e-03, -2.65929487e-02, -1.81379648e-02, -3.28844067e-03,\n",
       "        3.06485758e-02,  3.23182076e-02,  4.40945438e-02, -4.83133084e-02,\n",
       "       -5.11050793e-02, -3.01020793e-03,  2.28316045e-03,  1.15049086e-02,\n",
       "        1.19344335e-02,  7.62884899e-03,  2.15346449e-02,  4.77855027e-03,\n",
       "       -5.39021488e-03,  1.52746388e-03,  3.94468126e-03, -1.88110823e-02,\n",
       "        1.34035019e-02, -1.41675606e-04, -2.70454229e-02, -8.55992181e-02,\n",
       "        5.64698183e-02,  3.63855585e-03,  2.43904445e-02, -1.20587791e-02,\n",
       "       -6.33976409e-03, -2.09382925e-03,  2.26557540e-02,  1.41898593e-02,\n",
       "       -4.33299765e-03, -9.51162414e-02,  2.91725480e-02, -7.24918299e-03,\n",
       "        7.38681047e-03,  1.37271453e-03, -9.89192307e-03,  1.15449400e-03,\n",
       "       -1.75047463e-02,  1.13961299e-02, -9.36899540e-03,  2.19807724e-03,\n",
       "        2.16197036e-03, -1.32048940e-04, -7.53798507e-03, -2.09391949e-04,\n",
       "        1.47986152e-03,  1.92210221e-02,  9.65137313e-04,  7.57487347e-03,\n",
       "        7.78588438e-03,  4.13409529e-02, -2.22892792e-02, -1.68716054e-02,\n",
       "        1.54717299e-03,  1.30793538e-03,  3.78931957e-02,  8.36867231e-03,\n",
       "       -1.74404568e-02, -1.24032473e-02,  3.05029445e-03,  9.22826300e-03,\n",
       "        6.65946851e-04,  1.54457853e-02, -2.92871777e-02,  1.54106143e-02,\n",
       "        1.15664767e-02,  1.27580683e-02,  3.24831750e-02,  4.71366486e-03,\n",
       "       -7.54246693e-02,  1.47664815e-02,  6.15076758e-03, -1.41655940e-03,\n",
       "        7.03926775e-03, -6.75728591e-02, -2.54131064e-03, -2.82822701e-02,\n",
       "       -1.80184632e-02,  1.59607483e-02,  2.92141769e-02,  2.96028707e-02,\n",
       "       -4.65938541e-02])"
      ]
     },
     "execution_count": 358,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lasso_model.coef_[np.where(lasso_model.coef_ != 0)[0]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 353,
   "id": "71608932",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([   0,    1,    2,    4,    6,    8,    9,   11,   12,   13,   18,\n",
       "          25,   26,   79,   82,   83,  101,  102,  116,  118,  119,  122,\n",
       "         123,  126,  131,  136,  142,  146,  149,  150,  151,  169,  170,\n",
       "         171,  174,  176,  179,  182,  187,  188,  191,  192,  193,  194,\n",
       "         196,  198,  200,  203,  207,  208,  209,  210,  211,  213,  214,\n",
       "         227,  229,  230,  231,  232,  233,  236,  243,  244,  245,  246,\n",
       "         249,  250,  251,  253,  254,  255,  260,  262,  267,  268,  270,\n",
       "         277,  279,  289,  293,  297,  306,  309,  310,  314,  318,  334,\n",
       "         351,  355,  356,  357,  363,  365,  366,  367,  370,  373,  375,\n",
       "         377,  379,  382,  396,  402,  410,  412,  413,  415,  418,  424,\n",
       "         428,  436,  439,  441,  444,  445,  455,  456,  457,  461,  470,\n",
       "         473,  477,  478,  483,  484,  486,  490,  494,  496,  497,  499,\n",
       "         500,  501,  503,  505,  513,  529,  532,  533,  542,  543,  545,\n",
       "         549,  551,  552,  556,  557,  572,  573,  576,  639,  736,  742,\n",
       "         753,  827,  967,  968,  969,  971,  974,  976,  979,  987,  988,\n",
       "         990,  992,  993,  994,  995,  996,  997,  998, 1018, 1023, 1031,\n",
       "        1038, 1040, 1042, 1048, 1059, 1067, 1069, 1071, 1072, 1073, 1074,\n",
       "        1079, 1083, 1085, 1086, 1088, 1090, 1092, 1095, 1097, 1098, 1099,\n",
       "        1110, 1111, 1112, 1120, 1121, 1122, 1125, 1126, 1129, 1130, 1131,\n",
       "        1132, 1133, 1135, 1139, 1140, 1144, 1145, 1151, 1155, 1159, 1168,\n",
       "        1169, 1172, 1173, 1176, 1179, 1180, 1181, 1182, 1183, 1184, 1185,\n",
       "        1186, 1191, 1192, 1195, 1199, 1202, 1214, 1215, 1216, 1218, 1222,\n",
       "        1223, 1224, 1225, 1226, 1228, 1229, 1230, 1231, 1232, 1234, 1235,\n",
       "        1236, 1237, 1245, 1248, 1251, 1252, 1258, 1259, 1260, 1263, 1264,\n",
       "        1266, 1267, 1269, 1271, 1275, 1276, 1277, 1279, 1281, 1282, 1283,\n",
       "        1292, 1294, 1297, 1310, 1312, 1316, 1317, 1318, 1327, 1334, 1335,\n",
       "        1340, 1350, 1351, 1353, 1354, 1355, 1356, 1358, 1359, 1361, 1362,\n",
       "        1363, 1364, 1365, 1366, 1369, 1370, 1380, 1382, 1384, 1390, 1394,\n",
       "        1395, 1396, 1401, 1403, 1408, 1412, 1417, 1422, 1437, 1441, 1442,\n",
       "        1443, 1444, 1446, 1447, 1449, 1452, 1453, 1463, 1485, 1488, 1496,\n",
       "        1499, 1502, 1506, 1507, 1520, 1554, 1558, 1560, 1561, 1562, 1590,\n",
       "        1595, 1597, 1598, 1599, 1600, 1601, 1602, 1604, 1605, 1606, 1618,\n",
       "        1620, 1621, 1627, 1656, 1665, 1677, 1689, 1692, 1696, 1697, 1699,\n",
       "        1700, 1701, 1704, 1710, 1711, 1712, 1717, 1720, 1723, 1724, 1726,\n",
       "        1731, 1737, 1738, 1741, 1742, 1744, 1746, 1747, 1755, 1759, 1763,\n",
       "        1764, 1767, 1769, 1771, 1772, 1775, 1776, 1782, 1784, 1785, 1788,\n",
       "        1793, 1798, 1800, 1805, 1807, 1808, 1817, 1827, 1828, 1831, 1833,\n",
       "        1834, 1835, 1836, 1838, 1840, 1848, 1867, 1874, 1877, 1884, 1895,\n",
       "        1902, 1909, 1931, 1935, 1936, 1973, 1986, 1987, 2002, 2011, 2020,\n",
       "        2027, 2029, 2030, 2042, 2047, 2052, 2063, 2072, 2074, 2083, 2088,\n",
       "        2090, 2095, 2096, 2102, 2110, 2113, 2114, 2115, 2125, 2127, 2134,\n",
       "        2145, 2150, 2154, 2182, 2188, 2189, 2190, 2200, 2202, 2219, 2225,\n",
       "        2226, 2228, 2236, 2242, 2249, 2254, 2255, 2266, 2271, 2278, 2291],\n",
       "       dtype=int64),)"
      ]
     },
     "execution_count": 353,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.where(lasso_model.coef_ != 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "c207f19c",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_lasso_less_predictors = train_Xstd.iloc[:, coef_0]\n",
    "test_lasso_less_predictors = test_Xstd.iloc[:, coef_0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e591916e",
   "metadata": {},
   "source": [
    "alphas = np.logspace(-1,-5,200)\n",
    "lassocv2 = LassoCV(alphas = alphas,max_iter = 200000, n_jobs=-1, cv = 10)\n",
    "lassocv2.fit(train_lasso_less_predictors, y)\n",
    "lassocv2.alpha_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "d18cd1ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "lasso_model2 = Lasso(alpha=0.00035297073027306503, max_iter=200000).fit(train_lasso_less_predictors, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "772345ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-2 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-2 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"â–¸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"â–¾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-2 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-2 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-2 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>BaggingRegressor(bootstrap_features=True, estimator=LinearRegression(),\n",
       "                 n_estimators=4000, n_jobs=-1, oob_score=True, random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;BaggingRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.ensemble.BaggingRegressor.html\">?<span>Documentation for BaggingRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>BaggingRegressor(bootstrap_features=True, estimator=LinearRegression(),\n",
       "                 n_estimators=4000, n_jobs=-1, oob_score=True, random_state=1)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: LinearRegression</label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;LinearRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "BaggingRegressor(bootstrap_features=True, estimator=LinearRegression(),\n",
       "                 n_estimators=4000, n_jobs=-1, oob_score=True, random_state=1)"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "linear_bagged_model = BaggingRegressor(estimator=LinearRegression(), bootstrap_features=True, n_jobs=-1, \\\n",
    "                                       oob_score= True, random_state=1, n_estimators = 4000)\n",
    "linear_bagged_model.fit(train_lasso_less_predictors, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "39812214",
   "metadata": {},
   "outputs": [],
   "source": [
    "lasso_predictions2 = np.exp(lasso_model2.predict(test_lasso_less_predictors))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "2bb0142a",
   "metadata": {},
   "outputs": [],
   "source": [
    "linear_predictions = linear_bagged_model.predict(test_lasso_less_predictors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "74362ce0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([ 621, 1997, 3247, 3249, 3294], dtype=int64),)"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.where(linear_predictions>10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "742423f1",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "linear_predictions[np.where(linear_predictions < 2)] = lasso_model2.predict(test_lasso_less_predictors)[np.where(linear_predictions < 2)]\n",
    "linear_predictions[np.where(linear_predictions > 10)] = lasso_model2.predict(test_lasso_less_predictors)[np.where(linear_predictions >10)]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "1dc75a54",
   "metadata": {},
   "outputs": [],
   "source": [
    "real_linear = np.exp(linear_predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "56a57fd0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2936.1348612204742"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "real_linear.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "7d28a323",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "79.25721364251903"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "root_mean_squared_error(real_linear, stack_cat_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "26e02aad",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_pred = real_linear * 1.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "cbb2aa92",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "85.95333950387018"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "root_mean_squared_error(final_pred, stack_cat_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "90fd7cdb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.8949101430203625"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_pred.min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "1e5ed419",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "158.714724889757"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_pred.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5bc2dd1c",
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_series = pd.Series(pred, name = 'predicted')\n",
    "sample_dataframe = pd.DataFrame(sample_series)\n",
    "sample_dataframe['id'] = test['id']\n",
    "sample_dataframe = sample_dataframe[['id', 'predicted']]\n",
    "sample_dataframe['predicted'] = sample_dataframe['predicted']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "922c2ab6",
   "metadata": {},
   "source": [
    "#### Big Note\n",
    "- A lot of these predictions were bad on the public leaderboard. Knowing this, there is a good chance a lot are bad on the private, though I am also sure some of these are good for the private"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f83f9490",
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_dataframe.loc[3257, 'predicted'] = 1200 #compare to hosts prices in train\n",
    "sample_dataframe.loc[3299, 'predicted'] = 1100 #commpare to hosts prices in train\n",
    "#sample_dataframe.loc[2424, 'predicted'] = 3000 # bad call. \n",
    "sample_dataframe.loc[524, 'predicted'] = 525 #compare to host prices in train\n",
    "sample_dataframe.loc[3205, 'predicted'] = 1500 #compare to host prices in train\n",
    "sample_dataframe.loc[1124, 'predicted'] = 999 #compare to host prices in train\n",
    "sample_dataframe.loc[2589, 'predicted'] = 999 #compare to host prices in train\n",
    "sample_dataframe.loc[2711, 'predicted'] = 1964 #compare to host prices in train\n",
    "sample_dataframe.loc[3283, 'predicted'] = 888 #compare to host prices in train\n",
    "# didn't try the below yet\n",
    "sample_dataframe.loc[1648, 'predicted'] = 549 #compared to host prices in train, definitely right\n",
    "#sample_dataframe.loc[1302, 'predicted'] = 400 #compare to prices in train I think its lower than my pred but not sure\n",
    "sample_dataframe.loc[697, 'predicted'] = 765 #compare to host prices in train, def right\n",
    "\n",
    "# All these are same host id rn\n",
    "sample_dataframe.loc[293, 'predicted'] = 787 #compare to host prices in train (very confident in this and next 3 to 1845)\n",
    "sample_dataframe.loc[3131, 'predicted'] = 787 #compare to host prices in train\n",
    "sample_dataframe.loc[572, 'predicted'] = 666 #compare to host prices in train\n",
    "sample_dataframe.loc[1845, 'predicted'] = 666 #compare to host prices in train\n",
    "sample_dataframe.loc[889, 'predicted'] = 982 #compare to host prices in train\n",
    "sample_dataframe.loc[405, 'predicted'] = 832 #compare to host prices in train\n",
    "sample_dataframe.loc[1049, 'predicted'] = 832 #compare to host prices in train\n",
    "sample_dataframe.loc[1144, 'predicted'] = 525 #compare to host prices in train\n",
    "sample_dataframe.loc[2244, 'predicted'] = 222 #compare to host prices in train\n",
    "sample_dataframe.loc[1763, 'predicted'] = 263 #compare to host prices in train\n",
    "sample_dataframe.loc[2858, 'predicted'] = 263 #compare to host prices in train\n",
    "sample_dataframe.loc[3292, 'predicted'] = 490 #compare to host prices in train\n",
    "sample_dataframe.loc[836, 'predicted'] = 415 #compare to host prices in train\n",
    "sample_dataframe.loc[2937, 'predicted'] = 415 #compare to host prices in train\n",
    "\n",
    "#back to regularly scheduled programming\n",
    "sample_dataframe.loc[2046, 'predicted'] = 999 #compare to host prices in train\n",
    "# come back to 750(I think price should be higher idk how much though)\n",
    "sample_dataframe.loc[2409, 'predicted'] = 3500 #compare to host prices in train99(This was shit)\n",
    "sample_dataframe.loc[2872, 'predicted'] = 1100 #compare to host prices in train\n",
    "sample_dataframe.loc[3257, 'predicted'] = 1300 #compare to host prices in train\n",
    "#sample_dataframe.loc[2566, 'predicted'] = 400 #compare to host prices in train\n",
    "#sample_dataframe.loc[2606, 'predicted'] = 3000 # taking a gamble here\n",
    "\n",
    "# Noticed a high price when the difference between beds and baths is low or negative(more baths to beds)\n",
    "sample_dataframe.loc[83, 'predicted'] = 2000\n",
    "sample_dataframe.loc[554, 'predicted'] = 1000\n",
    "sample_dataframe.loc[403, 'predicted'] = 2000\n",
    "# sample_dataframe.loc[1871, 'predicted'] = 2000 #wasnt good\n",
    "# sample_dataframe.loc[1747, 'predicted'] = 3500 #so shit\n",
    "#sample_dataframe.loc[2101, 'predicted'] = 3500\n",
    "# sample_dataframe.loc[2538, 'predicted'] = 3000 #this one bad\n",
    "\n",
    "#have not tried yet\n",
    "#sample_dataframe.loc[3081, 'predicted'] = 1500 #try these(bad)\n",
    "#sample_dataframe.loc[1591, 'predicted'] = 1500 #try these(bad)\n",
    "#sample_dataframe.loc[3226, 'predicted'] = 3000 #try these(bad)\n",
    "sample_dataframe.loc[344, 'predicted'] = 999 #def right\n",
    "#sample_dataframe.loc[931, 'predicted'] = 3000 # this is one to try as this person has only one listing and many na values(bad)\n",
    "#sample_dataframe.loc[584, 'predicted'] = 3000 # this is one to try as this person has only one listing and many na values(bad)\n",
    "sample_dataframe.loc[750, 'predicted'] = 2500 #this one good\n",
    "sample_dataframe.loc[931, 'predicted'] = 450\n",
    "sample_dataframe.loc[1949, 'predicted'] = 1750 \n",
    "sample_dataframe.loc[1302, 'predicted'] = 1500 \n",
    "sample_dataframe.loc[2251, 'predicted'] = 900 \n",
    "sample_dataframe.loc[363, 'predicted'] = 1000 \n",
    "sample_dataframe.loc[560, 'predicted'] = 745 \n",
    "sample_dataframe.loc[2955, 'predicted'] = 1500 "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec1c5d42",
   "metadata": {},
   "source": [
    "## 5) Export the predictions in the format required to submit on Kaggle\n",
    "Put code below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 473,
   "id": "723b6f5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_dataframe.to_csv('C:/Users/jam2m/Data_Science/Datasets/this_will_suck.csv', index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "63369f63",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "415cde7b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
